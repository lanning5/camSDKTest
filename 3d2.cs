//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  // Local procedures 
  public void action3D22 (HObject ho_ProfileImageTLW, HObject ho_ProfileImageBW, 
      out HTuple hv_flatness1, out HTuple hv_parallam22)
  {



    // Local iconic variables 

    HObject ho_ImageNewTLW=null, ho_ImageNewBW=null;
    HObject ho_CrossCen=null, ho_CrossCenTL=null, ho_Cross6=null;
    HObject ho_Regions=null, ho_ImageReduced=null, ho_Cross7=null;

    // Local control variables 

    HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
    HTuple hv_Phi = new HTuple(), hv_RowCenTL = new HTuple();
    HTuple hv_ColCenTL = new HTuple(), hv_PhiTL = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_sy = new HTuple();
    HTuple hv_sx = new HTuple(), hv_xpCompensate = new HTuple();
    HTuple hv_xpCompensateY = new HTuple(), hv_x22F = new HTuple();
    HTuple hv_y22F = new HTuple(), hv_x22P = new HTuple();
    HTuple hv_y22P = new HTuple(), hv_Output_y = new HTuple();
    HTuple hv_Output_x = new HTuple(), hv_Output_yp = new HTuple();
    HTuple hv_Output_xp = new HTuple(), hv_grayvaluesF = new HTuple();
    HTuple hv_removeIndex = new HTuple(), hv_grayvaluesP = new HTuple();
    HTuple hv_removeIndex1 = new HTuple(), hv_x1F = new HTuple();
    HTuple hv_Y1F = new HTuple(), hv_x1P = new HTuple(), hv_Y1P = new HTuple();
    HTuple hv_grayvaluesFZ = new HTuple(), hv_distance1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageNewTLW);
    HOperatorSet.GenEmptyObj(out ho_ImageNewBW);
    HOperatorSet.GenEmptyObj(out ho_CrossCen);
    HOperatorSet.GenEmptyObj(out ho_CrossCenTL);
    HOperatorSet.GenEmptyObj(out ho_Cross6);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Cross7);
    hv_flatness1 = new HTuple();
    hv_parallam22 = new HTuple();
    try
    {
      try
      {
        ho_ImageNewTLW.Dispose();
        get_ImageTL(ho_ProfileImageTLW, out ho_ImageNewTLW);

        ho_ImageNewBW.Dispose();
        get_ImageB(ho_ProfileImageBW, out ho_ImageNewBW);
        //getLocation (ProfileImageTLW, ProfileImageBW, ImageNewTLW, ImageNewBW, RowTL, ColTL)
        //gen_cross_contour_xld (Cross, RowTL, ColTL, 106, 0.785398)
        hv_Row.Dispose();hv_Column.Dispose();hv_Phi.Dispose();
        getCenterPoint(ho_ImageNewBW, out hv_Row, out hv_Column, out hv_Phi);
        ho_CrossCen.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_CrossCen, hv_Row, hv_Column, 106, 
            hv_Phi);

        hv_RowCenTL.Dispose();hv_ColCenTL.Dispose();hv_PhiTL.Dispose();
        getCenterPointTL(ho_ImageNewTLW, out hv_RowCenTL, out hv_ColCenTL, out hv_PhiTL);
        ho_CrossCenTL.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_CrossCenTL, hv_RowCenTL, hv_ColCenTL, 
            106, hv_PhiTL);

      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }

      try
      {
        //定义像素当量
        hv_sy.Dispose();
        hv_sy = 12.36;
        //sx := 39.99
        //sx := 22
        hv_sx.Dispose();
        hv_sx = 20;

        //******FAI22


        hv_xpCompensate.Dispose();
        hv_xpCompensate = 0.8;
        hv_xpCompensateY.Dispose();
        hv_xpCompensateY = 0.3;

        hv_x22F.Dispose();
        hv_x22F = new HTuple();
        hv_x22F[0] = -10.25;
        hv_x22F[1] = 25.843;
        hv_x22F[2] = -10.25;
        hv_x22F[3] = -1;
        hv_x22F[4] = -1;
        hv_x22F[5] = -13.143;
        hv_x22F[6] = -13.143;
        hv_x22F[7] = -13.143;
        hv_x22F[8] = -19.605;
        hv_x22F[9] = 25.843;
        hv_x22F[10] = 25.843;
        hv_x22F[11] = -19.605;
        hv_x22F.Dispose();
        hv_x22F = new HTuple();
        hv_x22F[0] = -10.25;
        hv_x22F[1] = -25.843;
        hv_x22F[2] = -10.25;
        hv_x22F[3] = -1;
        hv_x22F[4] = -1;
        hv_x22F[5] = -13.143;
        hv_x22F[6] = -13.143;
        hv_x22F[7] = -13.143;
        hv_x22F[8] = -19.605;
        hv_x22F[9] = -25.843;
        hv_x22F[10] = -25.843;
        hv_x22F[11] = -19.605;
        hv_y22F.Dispose();
        hv_y22F = new HTuple();
        hv_y22F[0] = 11.01;
        hv_y22F[1] = 6.788;
        hv_y22F[2] = 2.461;
        hv_y22F[3] = 2.461;
        hv_y22F[4] = 11.01;
        hv_y22F[5] = 1;
        hv_y22F[6] = 6.788;
        hv_y22F[7] = 12.774;
        hv_y22F[8] = 12.774;
        hv_y22F[9] = 12.774;
        hv_y22F[10] = 1;
        hv_y22F[11] = 1;
        hv_x22P.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x22P = new HTuple();
        hv_x22P = hv_x22P.TupleConcat(-1.435-hv_xpCompensate);
        hv_x22P = hv_x22P.TupleConcat(new HTuple(-9.215, -9.215));
        hv_x22P = hv_x22P.TupleConcat(-1.435-hv_xpCompensate);
        }
        hv_y22P.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_y22P = ((
            (new HTuple(10.678)).TupleConcat(10.678)).TupleConcat(2.898)).TupleConcat(
            2.898)+hv_xpCompensateY;
        }

        hv_Output_y.Dispose();hv_Output_x.Dispose();
        getPlanePoints(hv_x22F, hv_y22F, hv_Phi, hv_Row, hv_Column, hv_sx, hv_sy, 
            out hv_Output_y, out hv_Output_x);
        ho_Cross6.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross6, hv_Output_y, hv_Output_x, 
            106, hv_Phi);

        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_ImageNewTLW, out ho_Regions, 5816, 5995);
        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_ProfileImageBW, ho_Regions, out ho_ImageReduced
            );
        HOperatorSet.DispObj(ho_ImageNewTLW, hv_ExpDefaultWinHandle);
        HOperatorSet.DispObj(ho_Regions, hv_ExpDefaultWinHandle);

        hv_Output_yp.Dispose();hv_Output_xp.Dispose();
        getPlanePoints(hv_x22P, hv_y22P, hv_PhiTL, hv_RowCenTL, hv_ColCenTL, hv_sx, 
            hv_sy, out hv_Output_yp, out hv_Output_xp);
        ho_Cross7.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross7, hv_Output_yp, hv_Output_xp, 
            106, hv_Phi);

        //获取灰度
        hv_grayvaluesF.Dispose();hv_removeIndex.Dispose();
        get_grayValues(ho_ImageNewBW, hv_Output_y, hv_Output_x, hv_Phi, "F", out hv_grayvaluesF, 
            out hv_removeIndex);
        hv_grayvaluesP.Dispose();hv_removeIndex1.Dispose();
        get_grayValues(ho_ImageNewTLW, hv_Output_yp, hv_Output_xp, hv_Phi, "P", out hv_grayvaluesP, 
            out hv_removeIndex1);
        if ((int)(new HTuple((new HTuple(hv_removeIndex.TupleLength())).TupleNotEqual(
            0))) != 0)
        {
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_grayvaluesF, hv_removeIndex, out ExpTmpOutVar_0);
          hv_grayvaluesF.Dispose();
          hv_grayvaluesF = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_x22F, hv_removeIndex, out ExpTmpOutVar_0);
          hv_x22F.Dispose();
          hv_x22F = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_y22F, hv_removeIndex, out ExpTmpOutVar_0);
          hv_y22F.Dispose();
          hv_y22F = ExpTmpOutVar_0;
          }
        }
        if ((int)(new HTuple((new HTuple(hv_removeIndex1.TupleLength())).TupleNotEqual(
            0))) != 0)
        {
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_grayvaluesP, hv_removeIndex1, out ExpTmpOutVar_0);
          hv_grayvaluesP.Dispose();
          hv_grayvaluesP = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_x22P, hv_removeIndex1, out ExpTmpOutVar_0);
          hv_x22P.Dispose();
          hv_x22P = ExpTmpOutVar_0;
          }
          {
          HTuple ExpTmpOutVar_0;
          HOperatorSet.TupleRemove(hv_y22P, hv_removeIndex1, out ExpTmpOutVar_0);
          hv_y22P.Dispose();
          hv_y22P = ExpTmpOutVar_0;
          }
        }





        //点面
        hv_x1F.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x1F = hv_x22F*1000;
        }
        hv_Y1F.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Y1F = hv_y22F*1000;
        }
        hv_x1P.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_x1P = hv_x22P*1000;
        }
        hv_Y1P.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_Y1P = hv_y22P*1000;
        }
        hv_grayvaluesFZ.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_grayvaluesFZ = -5000+hv_grayvaluesF;
        }

        hv_flatness1.Dispose();hv_distance1.Dispose();
        DistancePoToPL(hv_x1F, hv_Y1F, hv_grayvaluesFZ, hv_x1P, hv_Y1P, hv_grayvaluesP, 
            out hv_flatness1, out hv_distance1);
        //平行度测量
        hv_parallam22.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_parallam22 = (((hv_distance1.TupleMax()
            )-(hv_distance1.TupleMin()))).TupleAbs();
        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
      }
      ho_ImageNewTLW.Dispose();
      ho_ImageNewBW.Dispose();
      ho_CrossCen.Dispose();
      ho_CrossCenTL.Dispose();
      ho_Cross6.Dispose();
      ho_Regions.Dispose();
      ho_ImageReduced.Dispose();
      ho_Cross7.Dispose();

      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Phi.Dispose();
      hv_RowCenTL.Dispose();
      hv_ColCenTL.Dispose();
      hv_PhiTL.Dispose();
      hv_Exception.Dispose();
      hv_sy.Dispose();
      hv_sx.Dispose();
      hv_xpCompensate.Dispose();
      hv_xpCompensateY.Dispose();
      hv_x22F.Dispose();
      hv_y22F.Dispose();
      hv_x22P.Dispose();
      hv_y22P.Dispose();
      hv_Output_y.Dispose();
      hv_Output_x.Dispose();
      hv_Output_yp.Dispose();
      hv_Output_xp.Dispose();
      hv_grayvaluesF.Dispose();
      hv_removeIndex.Dispose();
      hv_grayvaluesP.Dispose();
      hv_removeIndex1.Dispose();
      hv_x1F.Dispose();
      hv_Y1F.Dispose();
      hv_x1P.Dispose();
      hv_Y1P.Dispose();
      hv_grayvaluesFZ.Dispose();
      hv_distance1.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageNewTLW.Dispose();
      ho_ImageNewBW.Dispose();
      ho_CrossCen.Dispose();
      ho_CrossCenTL.Dispose();
      ho_Cross6.Dispose();
      ho_Regions.Dispose();
      ho_ImageReduced.Dispose();
      ho_Cross7.Dispose();

      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Phi.Dispose();
      hv_RowCenTL.Dispose();
      hv_ColCenTL.Dispose();
      hv_PhiTL.Dispose();
      hv_Exception.Dispose();
      hv_sy.Dispose();
      hv_sx.Dispose();
      hv_xpCompensate.Dispose();
      hv_xpCompensateY.Dispose();
      hv_x22F.Dispose();
      hv_y22F.Dispose();
      hv_x22P.Dispose();
      hv_y22P.Dispose();
      hv_Output_y.Dispose();
      hv_Output_x.Dispose();
      hv_Output_yp.Dispose();
      hv_Output_xp.Dispose();
      hv_grayvaluesF.Dispose();
      hv_removeIndex.Dispose();
      hv_grayvaluesP.Dispose();
      hv_removeIndex1.Dispose();
      hv_x1F.Dispose();
      hv_Y1F.Dispose();
      hv_x1P.Dispose();
      hv_Y1P.Dispose();
      hv_grayvaluesFZ.Dispose();
      hv_distance1.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void DistancePoToPL (HTuple hv_x1F, HTuple hv_Y1F, HTuple hv_grayvaluesFZ, 
      HTuple hv_x1P, HTuple hv_Y1P, HTuple hv_grayvaluesP, out HTuple hv_flatness, 
      out HTuple hv_distance)
  {



    // Local iconic variables 

    // Local control variables 

    HTuple hv_ObjectModel3D = new HTuple(), hv_ParFitting = new HTuple();
    HTuple hv_ValFitting = new HTuple(), hv_ObjectModel3DOutID = new HTuple();
    HTuple hv_primitive_parameter = new HTuple(), hv_center = new HTuple();
    HTuple hv_a = new HTuple(), hv_b = new HTuple(), hv_c = new HTuple();
    HTuple hv_d = new HTuple(), hv_D = new HTuple(), hv_d1 = new HTuple();
    HTuple hv_d2 = new HTuple();
    // Initialize local and output iconic variables 
    hv_flatness = new HTuple();
    hv_distance = new HTuple();
    try
    {
      hv_ObjectModel3D.Dispose();
      HOperatorSet.GenObjectModel3dFromPoints(hv_x1F, hv_Y1F, hv_grayvaluesFZ, out hv_ObjectModel3D);
      //visualize_object_model_3d (WindowHandle, ObjectModel3D, [], [], [], [], [], [], [], PoseOut)
      //3D模型拟合成平面
      hv_ParFitting.Dispose();
      hv_ParFitting = new HTuple();
      hv_ParFitting[0] = "primitive_type";
      hv_ParFitting[1] = "fitting_algorithm";
      hv_ParFitting[2] = "output_xyz_mapping";
      hv_ValFitting.Dispose();
      hv_ValFitting = new HTuple();
      hv_ValFitting[0] = "plane";
      hv_ValFitting[1] = "least_squares";
      hv_ValFitting[2] = "true";
      //Apply the fitting
      hv_ObjectModel3DOutID.Dispose();
      HOperatorSet.FitPrimitivesObjectModel3d(hv_ObjectModel3D, hv_ParFitting, hv_ValFitting, 
          out hv_ObjectModel3DOutID);
      //visualize_object_model_3d (WindowHandle, ObjectModel3DOutID, [], [], [], [], [], [], [], PoseOut)
      //获取拟合参数（法向量，平面中心一点）
      hv_primitive_parameter.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DOutID, "primitive_parameter", 
          out hv_primitive_parameter);
      hv_center.Dispose();
      HOperatorSet.GetObjectModel3dParams(hv_ObjectModel3DOutID, "center", out hv_center);
      //计算平面方程(a,b,c,d)
      hv_a.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_a = hv_primitive_parameter.TupleSelect(
          0);
      }
      hv_b.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_b = hv_primitive_parameter.TupleSelect(
          1);
      }
      hv_c.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_c = hv_primitive_parameter.TupleSelect(
          2);
      }
      hv_d.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_d = (((-1*(hv_center.TupleSelect(
          0)))*hv_a)-((hv_center.TupleSelect(1))*hv_b))-((hv_center.TupleSelect(2))*(hv_primitive_parameter.TupleSelect(
          2)));
      }
      hv_d.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_d = hv_primitive_parameter.TupleSelect(
          3);
      }

      //平面度计算
      hv_D.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_D = (((hv_a*hv_x1F)+(hv_b*hv_Y1F))+(hv_c*hv_grayvaluesFZ))+hv_d;
      }
      hv_flatness.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_flatness = ((((hv_D.TupleMax()
          )-(hv_D.TupleMin()))/1000)).TupleAbs();
      }
      //点到平面距离
      hv_d1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_d1 = ((hv_a*hv_a)+(hv_b*hv_b))+(hv_c*hv_c);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_d2.Dispose();
      HOperatorSet.TupleAbs((((hv_a*hv_x1P)+(hv_b*hv_Y1P))+(hv_c*hv_grayvaluesP))+hv_d, 
          out hv_d2);
      }
      hv_distance.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_distance = (hv_d2/hv_d1)/1000;
      }

      hv_ObjectModel3D.Dispose();
      hv_ParFitting.Dispose();
      hv_ValFitting.Dispose();
      hv_ObjectModel3DOutID.Dispose();
      hv_primitive_parameter.Dispose();
      hv_center.Dispose();
      hv_a.Dispose();
      hv_b.Dispose();
      hv_c.Dispose();
      hv_d.Dispose();
      hv_D.Dispose();
      hv_d1.Dispose();
      hv_d2.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_ObjectModel3D.Dispose();
      hv_ParFitting.Dispose();
      hv_ValFitting.Dispose();
      hv_ObjectModel3DOutID.Dispose();
      hv_primitive_parameter.Dispose();
      hv_center.Dispose();
      hv_a.Dispose();
      hv_b.Dispose();
      hv_c.Dispose();
      hv_d.Dispose();
      hv_D.Dispose();
      hv_d1.Dispose();
      hv_d2.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void get_grayValues (HObject ho_ImageNewBW, HTuple hv_rows, HTuple hv_cols, 
      HTuple hv_Phi, HTuple hv_plane, out HTuple hv_grayvalues, out HTuple hv_removeIndex)
  {




    // Local iconic variables 

    HObject ho_Rectangle=null, ho_Cross7=null;

    // Local control variables 

    HTuple hv_Index10 = new HTuple(), hv_tempGrayvalues = new HTuple();
    HTuple hv_tempGrayvalOrgin = new HTuple(), hv_Rows = new HTuple();
    HTuple hv_Columns = new HTuple(), hv_GrayvalOrgin = new HTuple();
    HTuple hv_Index11 = new HTuple(), hv_Grayval = new HTuple();
    HTuple hv_Index12 = new HTuple(), hv_Function = new HTuple();
    HTuple hv_GrayvalMean = new HTuple(), hv_SortedGrayval = new HTuple();
    HTuple hv_SelectedGrayval = new HTuple(), hv_MeanGrayval = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_Cross7);
    hv_grayvalues = new HTuple();
    hv_removeIndex = new HTuple();
    try
    {
      hv_grayvalues.Dispose();
      hv_grayvalues = new HTuple();
      hv_removeIndex.Dispose();
      hv_removeIndex = new HTuple();
      for (hv_Index10=0; (int)hv_Index10<=(int)((new HTuple(hv_rows.TupleLength()
          ))-1); hv_Index10 = (int)hv_Index10 + 1)
      {
        hv_tempGrayvalues.Dispose();
        hv_tempGrayvalues = new HTuple();
        hv_tempGrayvalOrgin.Dispose();
        hv_tempGrayvalOrgin = new HTuple();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Rectangle.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle, hv_rows.TupleSelect(hv_Index10), 
            hv_cols.TupleSelect(hv_Index10), hv_Phi, 4, 4);
        }
        hv_Rows.Dispose();hv_Columns.Dispose();
        HOperatorSet.GetRegionPoints(ho_Rectangle, out hv_Rows, out hv_Columns);
        ho_Cross7.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross7, hv_Rows, hv_Columns, 6, 0.785398);
        hv_GrayvalOrgin.Dispose();
        HOperatorSet.GetGrayval(ho_ImageNewBW, hv_Rows, hv_Columns, out hv_GrayvalOrgin);

        for (hv_Index11=0; (int)hv_Index11<=(int)((new HTuple(hv_GrayvalOrgin.TupleLength()
            ))-1); hv_Index11 = (int)hv_Index11 + 1)
        {
          if ((int)(new HTuple(((hv_GrayvalOrgin.TupleSelect(hv_Index11))).TupleGreater(
              -5000))) != 0)
          {
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
            {
            HTuple 
              ExpTmpLocalVar_tempGrayvalOrgin = hv_tempGrayvalOrgin.TupleConcat(
                hv_GrayvalOrgin.TupleSelect(hv_Index11));
            hv_tempGrayvalOrgin.Dispose();
            hv_tempGrayvalOrgin = ExpTmpLocalVar_tempGrayvalOrgin;
            }
            }
          }
        }
        hv_Grayval.Dispose();
        hv_Grayval = new HTuple(hv_tempGrayvalOrgin);

        if ((int)(new HTuple((new HTuple(hv_Grayval.TupleLength())).TupleEqual(0))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_grayvalues = hv_grayvalues.TupleConcat(
              0);
          hv_grayvalues.Dispose();
          hv_grayvalues = ExpTmpLocalVar_grayvalues;
          }
          }
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_removeIndex = hv_removeIndex.TupleConcat(
              hv_Index10);
          hv_removeIndex.Dispose();
          hv_removeIndex = ExpTmpLocalVar_removeIndex;
          }
          }
          continue;
        }

        if ((int)(new HTuple(hv_plane.TupleEqual("A"))) != 0)
        {
          for (hv_Index12=0; (int)hv_Index12<=(int)((new HTuple(hv_Grayval.TupleLength()
              ))-1); hv_Index12 = (int)hv_Index12 + 1)
          {
            if ((int)((new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleGreater(
                -2500))).TupleAnd(new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleLess(
                0)))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              {
              HTuple 
                ExpTmpLocalVar_tempGrayvalues = hv_tempGrayvalues.TupleConcat(
                  hv_Grayval.TupleSelect(hv_Index12));
              hv_tempGrayvalues.Dispose();
              hv_tempGrayvalues = ExpTmpLocalVar_tempGrayvalues;
              }
              }
            }
          }
        }
        else if ((int)(new HTuple(hv_plane.TupleEqual("P"))) != 0)
        {
          for (hv_Index12=0; (int)hv_Index12<=(int)((new HTuple(hv_Grayval.TupleLength()
              ))-1); hv_Index12 = (int)hv_Index12 + 1)
          {
            if ((int)((new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleGreater(
                5850))).TupleAnd(new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleLess(
                8500)))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              {
              HTuple 
                ExpTmpLocalVar_tempGrayvalues = hv_tempGrayvalues.TupleConcat(
                  hv_Grayval.TupleSelect(hv_Index12));
              hv_tempGrayvalues.Dispose();
              hv_tempGrayvalues = ExpTmpLocalVar_tempGrayvalues;
              }
              }
            }
          }
        }
        else if ((int)(new HTuple(hv_plane.TupleEqual("F"))) != 0)
        {
          for (hv_Index12=0; (int)hv_Index12<=(int)((new HTuple(hv_Grayval.TupleLength()
              ))-1); hv_Index12 = (int)hv_Index12 + 1)
          {
            if ((int)((new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleGreater(
                9500))).TupleAnd(new HTuple(((hv_Grayval.TupleSelect(hv_Index12))).TupleLess(
                12000)))) != 0)
            {
              using (HDevDisposeHelper dh = new HDevDisposeHelper())
              {
              {
              HTuple 
                ExpTmpLocalVar_tempGrayvalues = hv_tempGrayvalues.TupleConcat(
                  hv_Grayval.TupleSelect(hv_Index12));
              hv_tempGrayvalues.Dispose();
              hv_tempGrayvalues = ExpTmpLocalVar_tempGrayvalues;
              }
              }
            }
          }
        }

        //现计算方式位置
        hv_Function.Dispose();
        HOperatorSet.CreateFunct1dArray(hv_tempGrayvalues, out hv_Function);
        hv_GrayvalMean.Dispose();
        HOperatorSet.SmoothFunct1dMean(hv_Function, 3, 3, out hv_GrayvalMean);
        hv_SortedGrayval.Dispose();
        HOperatorSet.TupleSort(hv_GrayvalMean, out hv_SortedGrayval);
        if ((int)((new HTuple((new HTuple(hv_SortedGrayval.TupleLength())).TupleGreaterEqual(
            3))).TupleAnd(new HTuple((new HTuple(hv_SortedGrayval.TupleLength())).TupleLessEqual(
            5)))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_SelectedGrayval.Dispose();
          HOperatorSet.TupleSelect(hv_SortedGrayval, HTuple.TupleGenSequence(1,(new HTuple(hv_SortedGrayval.TupleLength()
              ))-1,1), out hv_SelectedGrayval);
          }
        }
        else if ((int)(new HTuple((new HTuple(hv_SortedGrayval.TupleLength()
            )).TupleGreater(5))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          hv_SelectedGrayval.Dispose();
          HOperatorSet.TupleSelect(hv_SortedGrayval, HTuple.TupleGenSequence(4,(new HTuple(hv_SortedGrayval.TupleLength()
              ))-4,1), out hv_SelectedGrayval);
          }
        }
        else
        {
          hv_SelectedGrayval.Dispose();
          hv_SelectedGrayval = new HTuple(hv_SortedGrayval);
        }
        hv_MeanGrayval.Dispose();
        HOperatorSet.TupleMean(hv_SelectedGrayval, out hv_MeanGrayval);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_grayvalues = hv_grayvalues.TupleConcat(
            hv_MeanGrayval);
        hv_grayvalues.Dispose();
        hv_grayvalues = ExpTmpLocalVar_grayvalues;
        }
        }

      }
      ho_Rectangle.Dispose();
      ho_Cross7.Dispose();

      hv_Index10.Dispose();
      hv_tempGrayvalues.Dispose();
      hv_tempGrayvalOrgin.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_GrayvalOrgin.Dispose();
      hv_Index11.Dispose();
      hv_Grayval.Dispose();
      hv_Index12.Dispose();
      hv_Function.Dispose();
      hv_GrayvalMean.Dispose();
      hv_SortedGrayval.Dispose();
      hv_SelectedGrayval.Dispose();
      hv_MeanGrayval.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Rectangle.Dispose();
      ho_Cross7.Dispose();

      hv_Index10.Dispose();
      hv_tempGrayvalues.Dispose();
      hv_tempGrayvalOrgin.Dispose();
      hv_Rows.Dispose();
      hv_Columns.Dispose();
      hv_GrayvalOrgin.Dispose();
      hv_Index11.Dispose();
      hv_Grayval.Dispose();
      hv_Index12.Dispose();
      hv_Function.Dispose();
      hv_GrayvalMean.Dispose();
      hv_SortedGrayval.Dispose();
      hv_SelectedGrayval.Dispose();
      hv_MeanGrayval.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void get_ImageB (HObject ho_ProfileImageBW, out HObject ho_ImageNewB)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageBWConverted, ho_ImageBWScaled;
    HObject ho_ImageNewBWMirror, ho_ImageNewBWConvert;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageNewB);
    HOperatorSet.GenEmptyObj(out ho_ImageBWConverted);
    HOperatorSet.GenEmptyObj(out ho_ImageBWScaled);
    HOperatorSet.GenEmptyObj(out ho_ImageNewBWMirror);
    HOperatorSet.GenEmptyObj(out ho_ImageNewBWConvert);
    try
    {
      ho_ImageBWConverted.Dispose();
      HOperatorSet.ConvertImageType(ho_ProfileImageBW, out ho_ImageBWConverted, "int4");
      ho_ImageBWScaled.Dispose();
      HOperatorSet.ScaleImage(ho_ImageBWConverted, out ho_ImageBWScaled, 1, -32768);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ScaleImage(ho_ImageBWScaled, out ExpTmpOutVar_0, 1.6, 1000);
      ho_ImageBWScaled.Dispose();
      ho_ImageBWScaled = ExpTmpOutVar_0;
      }

      ho_ImageNewBWMirror.Dispose();
      HOperatorSet.MirrorImage(ho_ImageBWScaled, out ho_ImageNewBWMirror, "column");
      ho_ImageNewBWConvert.Dispose();
      HOperatorSet.ConvertImageType(ho_ImageNewBWMirror, out ho_ImageNewBWConvert, 
          "int2");
      ho_ImageNewB.Dispose();
      HOperatorSet.RotateImage(ho_ImageNewBWConvert, out ho_ImageNewB, 90, "constant");
      //rotate_image (ImageNewBWConvert, ImageNewB, -90, 'constant')


      ho_ImageBWConverted.Dispose();
      ho_ImageBWScaled.Dispose();
      ho_ImageNewBWMirror.Dispose();
      ho_ImageNewBWConvert.Dispose();


      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageBWConverted.Dispose();
      ho_ImageBWScaled.Dispose();
      ho_ImageNewBWMirror.Dispose();
      ho_ImageNewBWConvert.Dispose();


      throw HDevExpDefaultException;
    }
  }

  public void get_ImageTL (HObject ho_Image, out HObject ho_ImageNewTLW)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImageTLWConverted, ho_ImageTLWScaled;
    HObject ho_ImageNewTLWMirror, ho_ImageNewTLWConvert;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageNewTLW);
    HOperatorSet.GenEmptyObj(out ho_ImageTLWConverted);
    HOperatorSet.GenEmptyObj(out ho_ImageTLWScaled);
    HOperatorSet.GenEmptyObj(out ho_ImageNewTLWMirror);
    HOperatorSet.GenEmptyObj(out ho_ImageNewTLWConvert);
    try
    {
      //转换成实际高度图
      ho_ImageTLWConverted.Dispose();
      HOperatorSet.ConvertImageType(ho_Image, out ho_ImageTLWConverted, "int4");
      ho_ImageTLWScaled.Dispose();
      HOperatorSet.ScaleImage(ho_ImageTLWConverted, out ho_ImageTLWScaled, 1, -32768);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ScaleImage(ho_ImageTLWScaled, out ExpTmpOutVar_0, 1.6, 0);
      ho_ImageTLWScaled.Dispose();
      ho_ImageTLWScaled = ExpTmpOutVar_0;
      }

      //镜像旋转高度图
      ho_ImageNewTLWMirror.Dispose();
      HOperatorSet.MirrorImage(ho_ImageTLWScaled, out ho_ImageNewTLWMirror, "column");
      ho_ImageNewTLWConvert.Dispose();
      HOperatorSet.ConvertImageType(ho_ImageNewTLWMirror, out ho_ImageNewTLWConvert, 
          "int2");
      ho_ImageNewTLW.Dispose();
      HOperatorSet.RotateImage(ho_ImageNewTLWConvert, out ho_ImageNewTLW, 90, "constant");
      ho_ImageTLWConverted.Dispose();
      ho_ImageTLWScaled.Dispose();
      ho_ImageNewTLWMirror.Dispose();
      ho_ImageNewTLWConvert.Dispose();


      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageTLWConverted.Dispose();
      ho_ImageTLWScaled.Dispose();
      ho_ImageNewTLWMirror.Dispose();
      ho_ImageNewTLWConvert.Dispose();


      throw HDevExpDefaultException;
    }
  }

  public void getCenterPoint (HObject ho_ImageNewBW, out HTuple hv_Row, out HTuple hv_Column, 
      out HTuple hv_Phi)
  {



    // Local iconic variables 

    HObject ho_ImageNewBW1, ho_Regions1, ho_ImageReduced;
    HObject ho_EdgeAmplitude, ho_Edges, ho_ContoursSplit, ho_UnionContours;
    HObject ho_SelectedXLD, ho_SelectedXLD1, ho_SortedContours;
    HObject ho_ObjectSelected, ho_ContourX, ho_SortedContours1;
    HObject ho_ObjectSelected1, ho_ContourY, ho_ContourX1, ho_CrossCen;

    // Local control variables 

    HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
    HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
    HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
    HTuple hv_Phi1 = new HTuple(), hv_RowBegin1 = new HTuple();
    HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
    HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
    HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
    HTuple hv_PhiB = new HTuple(), hv_PhiRot = new HTuple();
    HTuple hv_HomMat2D = new HTuple(), hv_RowB = new HTuple();
    HTuple hv_ColB = new HTuple(), hv_IsOverlapping = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageNewBW1);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_UnionContours);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD1);
    HOperatorSet.GenEmptyObj(out ho_SortedContours);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_ContourX);
    HOperatorSet.GenEmptyObj(out ho_SortedContours1);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_ContourY);
    HOperatorSet.GenEmptyObj(out ho_ContourX1);
    HOperatorSet.GenEmptyObj(out ho_CrossCen);
    hv_Row = new HTuple();
    hv_Column = new HTuple();
    hv_Phi = new HTuple();
    try
    {
      //***** B 坐标轴
      ho_ImageNewBW1.Dispose();
      HOperatorSet.ConvertImageType(ho_ImageNewBW, out ho_ImageNewBW1, "uint2");
      ho_Regions1.Dispose();
      HOperatorSet.Threshold(ho_ImageNewBW1, out ho_Regions1, 7125, 11326);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageNewBW1, ho_Regions1, out ho_ImageReduced);

      ho_EdgeAmplitude.Dispose();
      HOperatorSet.SobelAmp(ho_ImageReduced, out ho_EdgeAmplitude, "sum_abs", 3);

      //edges_sub_pix (ImageReduced, Edges, 'canny', 1, 4, 20)
      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_EdgeAmplitude, out ho_Edges, "canny", 1, 20, 40);
      ho_ContoursSplit.Dispose();
      HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
          5, 4, 2);
      ho_UnionContours.Dispose();
      HOperatorSet.UnionCollinearContoursExtXld(ho_ContoursSplit, out ho_UnionContours, 
          350, 1.5, 4, 0.3, 0, -1, 1, 1, 1, 1, 1, 0, "attr_forget");
      ho_SelectedXLD.Dispose();
      HOperatorSet.SelectShapeXld(ho_UnionContours, out ho_SelectedXLD, "contlength", 
          "and", 500, 1000);
      ho_SelectedXLD1.Dispose();
      HOperatorSet.SelectShapeXld(ho_SelectedXLD, out ho_SelectedXLD1, "width", "and", 
          150, 99999);
      //x轴
      ho_SortedContours.Dispose();
      HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours, "upper_left", 
          "true", "row");
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_SortedContours, out ho_ObjectSelected, 1);
      hv_RowBegin.Dispose();hv_ColBegin.Dispose();hv_RowEnd.Dispose();hv_ColEnd.Dispose();hv_Nr.Dispose();hv_Nc.Dispose();hv_Dist.Dispose();
      HOperatorSet.FitLineContourXld(ho_ObjectSelected, "tukey", -1, 0, 5, 2, out hv_RowBegin, 
          out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ContourX.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_ContourX, hv_RowBegin.TupleConcat(
          hv_RowEnd), hv_ColBegin.TupleConcat(hv_ColEnd));
      }
      hv_Phi1.Dispose();
      HOperatorSet.LineOrientation(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 
          out hv_Phi1);
      //y轴
      ho_SortedContours1.Dispose();
      HOperatorSet.SortContoursXld(ho_SelectedXLD, out ho_SortedContours1, "upper_right", 
          "false", "column");
      ho_ObjectSelected1.Dispose();
      HOperatorSet.SelectObj(ho_SortedContours1, out ho_ObjectSelected1, 1);
      hv_RowBegin1.Dispose();hv_ColBegin1.Dispose();hv_RowEnd1.Dispose();hv_ColEnd1.Dispose();hv_Nr1.Dispose();hv_Nc1.Dispose();hv_Dist1.Dispose();
      HOperatorSet.FitLineContourXld(ho_ObjectSelected1, "tukey", -1, 0, 5, 2, out hv_RowBegin1, 
          out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1, 
          out hv_Dist1);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ContourY.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_ContourY, hv_RowBegin1.TupleConcat(
          hv_RowEnd1), hv_ColBegin1.TupleConcat(hv_ColEnd1));
      }
      hv_PhiB.Dispose();
      HOperatorSet.LineOrientation(hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, hv_ColEnd1, 
          out hv_PhiB);
      if ((int)(new HTuple(hv_PhiB.TupleGreaterEqual(0))) != 0)
      {
        hv_PhiRot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PhiRot = hv_PhiB-((new HTuple(90)).TupleRad()
            );
        }
      }
      else if ((int)(new HTuple(hv_PhiB.TupleLess(0))) != 0)
      {
        hv_PhiRot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PhiRot = ((new HTuple(90)).TupleRad()
            )+hv_PhiB;
        }
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2D.Dispose();
      HOperatorSet.VectorAngleToRigid((hv_RowBegin+hv_RowEnd)/2, (hv_ColBegin+hv_ColEnd)/2, 
          hv_Phi1, (hv_RowBegin+hv_RowEnd)/2, (hv_ColBegin+hv_ColEnd)/2, hv_PhiRot, 
          out hv_HomMat2D);
      }
      ho_ContourX1.Dispose();
      HOperatorSet.AffineTransContourXld(ho_ContourX, out ho_ContourX1, hv_HomMat2D);
      hv_RowB.Dispose();hv_ColB.Dispose();
      HOperatorSet.GetContourXld(ho_ContourX1, out hv_RowB, out hv_ColB);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Phi.Dispose();
      HOperatorSet.LineOrientation(hv_RowB.TupleSelect(0), hv_ColB.TupleSelect(0), 
          hv_RowB.TupleSelect(1), hv_ColB.TupleSelect(1), out hv_Phi);
      }

      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Row.Dispose();hv_Column.Dispose();hv_IsOverlapping.Dispose();
      HOperatorSet.IntersectionLines(hv_RowB.TupleSelect(0), hv_ColB.TupleSelect(
          0), hv_RowB.TupleSelect(1), hv_ColB.TupleSelect(1), hv_RowBegin1, hv_ColBegin1, 
          hv_RowEnd1, hv_ColEnd1, out hv_Row, out hv_Column, out hv_IsOverlapping);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_CrossCen.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_CrossCen, hv_Row, hv_Column, 106, (new HTuple(45)).TupleRad()
          );
      }






      //AngleB := rad(45)



      //threshold (ImageNewBW1, Regions, 10250, 16383)
      //fill_up (Regions, RegionFillUp)
      //area_center (RegionFillUp, Area, RowCen, ColumnCen)
      //gen_cross_contour_xld (Cross, RowCen, ColumnCen, 106, 0.785398)



      //x轴 B线
      //gen_cross_contour_xld (Cross2, RowCen-530, ColumnCen+93, 106, AngleB)
      //gen_cross_contour_xld (Cross3, RowCen-550, ColumnCen-524, 106, AngleB)



      //create_metrology_model (MetrologyHandle)
      //get_image_size (ImageNewBW, WidthB, HeightB)

      //set_metrology_model_image_size (MetrologyHandle, WidthB, HeightB)
      //add_metrology_object_line_measure (MetrologyHandle, RowTL-548, ColTL+110, RowTL-518, ColTL+640, 20, 5, 1, 30, [], [], Index1)
      //add_metrology_object_line_measure (MetrologyHandle, RowTL-514, ColTL+110*1.2, RowTL-494, ColTL+640*1.2, 50, 5, 1, 230, [], [], Index1)
      //add_metrology_object_line_measure (MetrologyHandle, RowTL-568, ColTL+110, RowTL-538, ColTL+640, 20, 5, 1, 30, [], [], Index1)

      //add_metrology_object_line_measure (MetrologyHandle, RowCen-530, ColumnCen+93, RowCen-550, ColumnCen-524, 20, 5, 1, 30, [], [], Index)

      //apply_metrology_model (ImageNewBW1, MetrologyHandle)
      //get_metrology_object_measures (Contours, MetrologyHandle, 'all', 'all', Row1, Column1)
      //gen_cross_contour_xld (Cross9, Row1, Column1, 6, AngleB)
      //get_metrology_object_result (MetrologyHandle, 0, 'all', 'result_type', 'all_param', ParameterB)
      //gen_region_line (RegionLinesX, ParameterB[0], ParameterB[1], ParameterB[2], ParameterB[3])
      //gen_contour_polygon_xld (OrginLineB, [ParameterB[0],ParameterB[2]], [ParameterB[1],ParameterB[3]])
      //line_orientation (ParameterB[0], ParameterB[1], ParameterB[2], ParameterB[3], PhiB)
      //tuple_deg (PhiB, Deg)
      //y轴 C线

      //gen_cross_contour_xld (Cross4, RowCen-363, ColumnCen+737, 106, AngleB)
      //gen_cross_contour_xld (Cross5, RowCen+321, ColumnCen+739, 106, AngleB)

      //add_metrology_object_line_measure (MetrologyHandle, RowTL-250, ColTL+1272, RowTL+320, ColTL+1255, 20, 5, 1, 140, [], [], Index2)
      //add_metrology_object_line_measure (MetrologyHandle, RowTL-250, ColTL+1272*1.11, RowTL+320, ColTL+1255*1.11, 20, 5, 1, 140, [], [], Index2)
      //add_metrology_object_line_measure (MetrologyHandle, RowCen-363, ColumnCen+737, RowCen+321, ColumnCen+739, 20, 5, 1, 140, [], [], Index2)


      //apply_metrology_model (ImageNewBW1, MetrologyHandle)
      //get_metrology_object_measures (Contours1, MetrologyHandle, Index2, 'all', Row, Column)
      //gen_cross_contour_xld (Cross6, Row, Column, 6, AngleB)
      //get_metrology_object_result (MetrologyHandle, Index2, 'all', 'result_type', 'all_param', ParameterC)
      //gen_region_line (RegionLinesY, ParameterC[0], ParameterC[1], ParameterC[2], ParameterC[3])
      //line_orientation (ParameterC[0], ParameterC[1], ParameterC[2], ParameterC[3], PhiC)
      //if (PhiC>=0)
        //PhiRot := PhiC-rad(90)
      //elseif (PhiC<0)
        //PhiRot := rad(90)+PhiC
      //endif
      //vector_angle_to_rigid ((ParameterB[0]+ParameterB[2])/2, (ParameterB[1]+ParameterB[3])/2, PhiB, (ParameterB[0]+ParameterB[2])/2, (ParameterB[1]+ParameterB[3])/2, PhiRot, HomMat2D)
      //affine_trans_contour_xld (OrginLineB, LineB, HomMat2D)
      //get_contour_xld (LineB, RowB, ColB)
      //line_orientation (RowB[0], ColB[0], RowB[1], ColB[1], Phi)

      //中心点
      //intersection_lines (RowB[0], ColB[0], RowB[1], ColB[1], ParameterC[0], ParameterC[1], ParameterC[2], ParameterC[3], Row, Column, IsOverlapping)
      //gen_cross_contour_xld (CrossCen, Row, Column, 106, Phi)

      HOperatorSet.DispObj(ho_ImageNewBW, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_ContourX1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_ContourY, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_CrossCen, hv_ExpDefaultWinHandle);



      ho_ImageNewBW1.Dispose();
      ho_Regions1.Dispose();
      ho_ImageReduced.Dispose();
      ho_EdgeAmplitude.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_UnionContours.Dispose();
      ho_SelectedXLD.Dispose();
      ho_SelectedXLD1.Dispose();
      ho_SortedContours.Dispose();
      ho_ObjectSelected.Dispose();
      ho_ContourX.Dispose();
      ho_SortedContours1.Dispose();
      ho_ObjectSelected1.Dispose();
      ho_ContourY.Dispose();
      ho_ContourX1.Dispose();
      ho_CrossCen.Dispose();

      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_Phi1.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_PhiB.Dispose();
      hv_PhiRot.Dispose();
      hv_HomMat2D.Dispose();
      hv_RowB.Dispose();
      hv_ColB.Dispose();
      hv_IsOverlapping.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageNewBW1.Dispose();
      ho_Regions1.Dispose();
      ho_ImageReduced.Dispose();
      ho_EdgeAmplitude.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_UnionContours.Dispose();
      ho_SelectedXLD.Dispose();
      ho_SelectedXLD1.Dispose();
      ho_SortedContours.Dispose();
      ho_ObjectSelected.Dispose();
      ho_ContourX.Dispose();
      ho_SortedContours1.Dispose();
      ho_ObjectSelected1.Dispose();
      ho_ContourY.Dispose();
      ho_ContourX1.Dispose();
      ho_CrossCen.Dispose();

      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_Phi1.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_PhiB.Dispose();
      hv_PhiRot.Dispose();
      hv_HomMat2D.Dispose();
      hv_RowB.Dispose();
      hv_ColB.Dispose();
      hv_IsOverlapping.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void getCenterPointTL (HObject ho_ImageNewTLW, out HTuple hv_RowCenTL, out HTuple hv_ColCenTL, 
      out HTuple hv_PhiTL)
  {



    // Local iconic variables 

    HObject ho_ImageNewTLW1, ho_Regions1, ho_ImageReduced1;
    HObject ho_EdgeAmplitude, ho_Edges, ho_ContoursSplit, ho_UnionContours;
    HObject ho_SelectedXLD, ho_SelectedXLD1, ho_SortedContours;
    HObject ho_ObjectSelected, ho_ContourX, ho_SortedContours1;
    HObject ho_ObjectSelected1, ho_ContourY, ho_ContourX1, ho_CrossCen;

    // Local control variables 

    HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
    HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
    HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
    HTuple hv_Phi1 = new HTuple(), hv_RowBegin1 = new HTuple();
    HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
    HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
    HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
    HTuple hv_PhiB = new HTuple(), hv_PhiRot = new HTuple();
    HTuple hv_HomMat2D = new HTuple(), hv_RowB = new HTuple();
    HTuple hv_ColB = new HTuple(), hv_IsOverlapping = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageNewTLW1);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_EdgeAmplitude);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_UnionContours);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD1);
    HOperatorSet.GenEmptyObj(out ho_SortedContours);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_ContourX);
    HOperatorSet.GenEmptyObj(out ho_SortedContours1);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_ContourY);
    HOperatorSet.GenEmptyObj(out ho_ContourX1);
    HOperatorSet.GenEmptyObj(out ho_CrossCen);
    hv_RowCenTL = new HTuple();
    hv_ColCenTL = new HTuple();
    hv_PhiTL = new HTuple();
    try
    {
      ho_ImageNewTLW1.Dispose();
      HOperatorSet.ConvertImageType(ho_ImageNewTLW, out ho_ImageNewTLW1, "uint2");
      ho_Regions1.Dispose();
      HOperatorSet.Threshold(ho_ImageNewTLW, out ho_Regions1, 6317, 16383);
      ho_ImageReduced1.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageNewTLW1, ho_Regions1, out ho_ImageReduced1
          );

      ho_EdgeAmplitude.Dispose();
      HOperatorSet.SobelAmp(ho_ImageReduced1, out ho_EdgeAmplitude, "sum_abs", 3);
      //edges_sub_pix (ImageReduced1, Edges, 'canny', 1, 20, 40)
      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_EdgeAmplitude, out ho_Edges, "canny", 1, 20, 40);

      ho_ContoursSplit.Dispose();
      HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
          5, 4, 2);
      ho_UnionContours.Dispose();
      HOperatorSet.UnionCollinearContoursXld(ho_ContoursSplit, out ho_UnionContours, 
          340, 1.5, 5, 0.5, "attr_forget");
      ho_SelectedXLD.Dispose();
      HOperatorSet.SelectShapeXld(ho_UnionContours, out ho_SelectedXLD, "contlength", 
          "and", 500, 1000);
      ho_SelectedXLD1.Dispose();
      HOperatorSet.SelectShapeXld(ho_SelectedXLD, out ho_SelectedXLD1, "width", "and", 
          150, 99999);
      //x轴
      ho_SortedContours.Dispose();
      HOperatorSet.SortContoursXld(ho_SelectedXLD1, out ho_SortedContours, "upper_left", 
          "true", "row");
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_SortedContours, out ho_ObjectSelected, 1);
      hv_RowBegin.Dispose();hv_ColBegin.Dispose();hv_RowEnd.Dispose();hv_ColEnd.Dispose();hv_Nr.Dispose();hv_Nc.Dispose();hv_Dist.Dispose();
      HOperatorSet.FitLineContourXld(ho_ObjectSelected, "tukey", -1, 0, 5, 2, out hv_RowBegin, 
          out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, out hv_Dist);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ContourX.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_ContourX, hv_RowBegin.TupleConcat(
          hv_RowEnd), hv_ColBegin.TupleConcat(hv_ColEnd));
      }
      hv_Phi1.Dispose();
      HOperatorSet.LineOrientation(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 
          out hv_Phi1);
      //y 轴
      ho_SortedContours1.Dispose();
      HOperatorSet.SortContoursXld(ho_SelectedXLD, out ho_SortedContours1, "upper_right", 
          "false", "column");
      ho_ObjectSelected1.Dispose();
      HOperatorSet.SelectObj(ho_SortedContours1, out ho_ObjectSelected1, 1);
      hv_RowBegin1.Dispose();hv_ColBegin1.Dispose();hv_RowEnd1.Dispose();hv_ColEnd1.Dispose();hv_Nr1.Dispose();hv_Nc1.Dispose();hv_Dist1.Dispose();
      HOperatorSet.FitLineContourXld(ho_ObjectSelected1, "tukey", -1, 0, 5, 2, out hv_RowBegin1, 
          out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1, 
          out hv_Dist1);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_ContourY.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_ContourY, hv_RowBegin1.TupleConcat(
          hv_RowEnd1), hv_ColBegin1.TupleConcat(hv_ColEnd1));
      }
      hv_PhiB.Dispose();
      HOperatorSet.LineOrientation(hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, hv_ColEnd1, 
          out hv_PhiB);
      if ((int)(new HTuple(hv_PhiB.TupleGreaterEqual(0))) != 0)
      {
        hv_PhiRot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PhiRot = hv_PhiB-((new HTuple(90)).TupleRad()
            );
        }
      }
      else if ((int)(new HTuple(hv_PhiB.TupleLess(0))) != 0)
      {
        hv_PhiRot.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_PhiRot = ((new HTuple(90)).TupleRad()
            )+hv_PhiB;
        }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HomMat2D.Dispose();
      HOperatorSet.VectorAngleToRigid((hv_RowBegin+hv_RowEnd)/2, (hv_ColBegin+hv_ColEnd)/2, 
          hv_Phi1, (hv_RowBegin+hv_RowEnd)/2, (hv_ColBegin+hv_ColEnd)/2, hv_PhiRot, 
          out hv_HomMat2D);
      }
      ho_ContourX1.Dispose();
      HOperatorSet.AffineTransContourXld(ho_ContourX, out ho_ContourX1, hv_HomMat2D);
      hv_RowB.Dispose();hv_ColB.Dispose();
      HOperatorSet.GetContourXld(ho_ContourX1, out hv_RowB, out hv_ColB);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_PhiTL.Dispose();
      HOperatorSet.LineOrientation(hv_RowB.TupleSelect(0), hv_ColB.TupleSelect(0), 
          hv_RowB.TupleSelect(1), hv_ColB.TupleSelect(1), out hv_PhiTL);
      }





      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowCenTL.Dispose();hv_ColCenTL.Dispose();hv_IsOverlapping.Dispose();
      HOperatorSet.IntersectionLines(hv_RowB.TupleSelect(0), hv_ColB.TupleSelect(
          0), hv_RowB.TupleSelect(1), hv_ColB.TupleSelect(1), hv_RowBegin1, hv_ColBegin1, 
          hv_RowEnd1, hv_ColEnd1, out hv_RowCenTL, out hv_ColCenTL, out hv_IsOverlapping);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_CrossCen.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_CrossCen, hv_RowCenTL, hv_ColCenTL, 
          106, (new HTuple(45)).TupleRad());
      }

      HOperatorSet.DispObj(ho_ImageNewTLW, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_ContourX1, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_ContourY, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_CrossCen, hv_ExpDefaultWinHandle);

      ho_ImageNewTLW1.Dispose();
      ho_Regions1.Dispose();
      ho_ImageReduced1.Dispose();
      ho_EdgeAmplitude.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_UnionContours.Dispose();
      ho_SelectedXLD.Dispose();
      ho_SelectedXLD1.Dispose();
      ho_SortedContours.Dispose();
      ho_ObjectSelected.Dispose();
      ho_ContourX.Dispose();
      ho_SortedContours1.Dispose();
      ho_ObjectSelected1.Dispose();
      ho_ContourY.Dispose();
      ho_ContourX1.Dispose();
      ho_CrossCen.Dispose();

      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_Phi1.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_PhiB.Dispose();
      hv_PhiRot.Dispose();
      hv_HomMat2D.Dispose();
      hv_RowB.Dispose();
      hv_ColB.Dispose();
      hv_IsOverlapping.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImageNewTLW1.Dispose();
      ho_Regions1.Dispose();
      ho_ImageReduced1.Dispose();
      ho_EdgeAmplitude.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_UnionContours.Dispose();
      ho_SelectedXLD.Dispose();
      ho_SelectedXLD1.Dispose();
      ho_SortedContours.Dispose();
      ho_ObjectSelected.Dispose();
      ho_ContourX.Dispose();
      ho_SortedContours1.Dispose();
      ho_ObjectSelected1.Dispose();
      ho_ContourY.Dispose();
      ho_ContourX1.Dispose();
      ho_CrossCen.Dispose();

      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_Phi1.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_PhiB.Dispose();
      hv_PhiRot.Dispose();
      hv_HomMat2D.Dispose();
      hv_RowB.Dispose();
      hv_ColB.Dispose();
      hv_IsOverlapping.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void getPlanePoints (HTuple hv_x22F, HTuple hv_y22F, HTuple hv_Phi, HTuple hv_Row, 
      HTuple hv_Column, HTuple hv_sx, HTuple hv_sy, out HTuple hv_Output_y, out HTuple hv_Output_x)
  {



    // Local iconic variables 

    HObject ho_Cross6;

    // Local control variables 

    HTuple hv_x = new HTuple(), hv_y = new HTuple();
    HTuple hv_deta_y = new HTuple(), hv_deta_x = new HTuple();
    HTuple hv_Output_x1 = new HTuple(), hv_Output_y1 = new HTuple();
    HTuple hv_HomMat2DIdentity2 = new HTuple(), hv_HomMat2DRotate = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Cross6);
    hv_Output_y = new HTuple();
    hv_Output_x = new HTuple();
    try
    {
      //* 获取坐标
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_x.Dispose();
      HOperatorSet.TupleAbs(hv_x22F*1000, out hv_x);
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_y.Dispose();
      HOperatorSet.TupleAbs(hv_y22F*1000, out hv_y);
      }

      //C平移延x轴移动距离
      hv_deta_y.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_deta_y = ((hv_y*((new HTuple(0)).TupleCos()
          ))-(hv_x*((new HTuple(0)).TupleSin())))/hv_sy;
      }
      //C平移延y轴移动距离
      hv_deta_x.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_deta_x = (((hv_y*((new HTuple(0)).TupleSin()
          ))-((hv_x*((new HTuple(0)).TupleTan()))*((new HTuple(0)).TupleSin())))+(hv_x/((new HTuple(0)).TupleCos()
          )))/hv_sx;
      }


      //8个点的像素坐标，2位y方向补偿
      hv_Output_x1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Output_x1 = hv_Column-hv_deta_x;
      }
      hv_Output_y1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Output_y1 = hv_Row+hv_deta_y;
      }


      hv_HomMat2DIdentity2.Dispose();
      HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity2);
      hv_HomMat2DRotate.Dispose();
      HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity2, hv_Phi, hv_Row, hv_Column, 
          out hv_HomMat2DRotate);
      hv_Output_y.Dispose();hv_Output_x.Dispose();
      HOperatorSet.AffineTransPoint2d(hv_HomMat2DRotate, hv_Output_y1, hv_Output_x1, 
          out hv_Output_y, out hv_Output_x);
      ho_Cross6.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_Cross6, hv_Output_y, hv_Output_x, 106, 
          hv_Phi);
      ho_Cross6.Dispose();

      hv_x.Dispose();
      hv_y.Dispose();
      hv_deta_y.Dispose();
      hv_deta_x.Dispose();
      hv_Output_x1.Dispose();
      hv_Output_y1.Dispose();
      hv_HomMat2DIdentity2.Dispose();
      hv_HomMat2DRotate.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Cross6.Dispose();

      hv_x.Dispose();
      hv_y.Dispose();
      hv_deta_y.Dispose();
      hv_deta_x.Dispose();
      hv_Output_x1.Dispose();
      hv_Output_y1.Dispose();
      hv_HomMat2DIdentity2.Dispose();
      hv_HomMat2DRotate.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_ProfileImageTLW, ho_ProfileImageBW;

    // Local control variables 

    HTuple hv_flatness1 = new HTuple(), hv_parallam22 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ProfileImageTLW);
    HOperatorSet.GenEmptyObj(out ho_ProfileImageBW);
    try
    {
      //dev_close_window ()
      //dev_open_window (0, 0, 512, 512, 'black', WindowHandle)

      //Image Acquisition 01: Code generated by Image Acquisition 01
      //list_files ('E:/image/MVS/0923/1', ['files','follow_links'], ImageFilesTL)
      //tuple_regexp_select (ImageFilesTL, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFilesTL)
      //list_files ('E:/image/MVS/0923/2', ['files','follow_links'], ImageFilesBW)
      //tuple_regexp_select (ImageFilesBW, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFilesBW)



      //* for Index := 0 to |ImageFilesTL| - 1 by 1
      //*     read_image (ProfileImageTLW, ImageFilesTL[Index])
      //*     read_image (ProfileImageBW, ImageFilesBW[Index])
      ho_ProfileImageTLW.Dispose();
      HOperatorSet.ReadImage(out ho_ProfileImageTLW, "E:/image/MVS/0923/1.tif");
      ho_ProfileImageBW.Dispose();
      HOperatorSet.ReadImage(out ho_ProfileImageBW, "E:/image/MVS/0923/1b.tif");

      hv_flatness1.Dispose();hv_parallam22.Dispose();
      action3D22(ho_ProfileImageTLW, ho_ProfileImageBW, out hv_flatness1, out hv_parallam22);


      //*     dev_display (ImageNewBW)
      //*     dev_display (Cross6)


      //*     dev_display (ImageNewTLW)
      //*     dev_display (Cross7)

      //*     set_tposition (WindowHandle, 200, 200)
      //*     write_string (WindowHandle, '平行度为\t '+parallam22)


      //stop ()
      //* endfor








    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ProfileImageTLW.Dispose();
      ho_ProfileImageBW.Dispose();

      hv_flatness1.Dispose();
      hv_parallam22.Dispose();

      throw HDevExpDefaultException;
    }
    ho_ProfileImageTLW.Dispose();
    ho_ProfileImageBW.Dispose();

    hv_flatness1.Dispose();
    hv_parallam22.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

