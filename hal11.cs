//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.0.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;


public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;
     HWindow hwindow;
  public  HObject ho_Image = new HObject();
    public HTuple X1, Y1, dG, CirLen; // 测量项距离
    public double X2, Y2, DG, CircleRadius;
    public string errStr = null;
    public int IsErrHappen = 0;

    public HDevelopExport()
    {
        hwindow = new HWindow();
    }
  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

    public void DisplayWindowsInitial(int Width, int Height, IntPtr Handle)
    {
        // ch: 定义显示的起点和宽高 || en: Definition the width and height of the display window
        HTuple hWindowRow, hWindowColumn, hWindowWidth, hWindowHeight;

        // ch: 设置显示窗口的起点和宽高 || en: Set the width and height of the display window
        hWindowRow = 0;
        hWindowColumn = 0;
        hWindowWidth = Width;
        hWindowHeight = Height;
       // hwindow = new HWindow();
       // HWindow hwindow;
        try
        {
            // HTuple hWindowID = hSmartWindowControl1.HalconWindow;
            HTuple hWindowID = Handle;
            hwindow.OpenWindow(hWindowRow, hWindowColumn, hWindowWidth, hWindowHeight, hWindowID, "visible", "");
            //m_Window.OpenWindow(hWindowRow, hWindowColumn, hWindowWidth, hWindowHeight, hWindowID, "visible", "");
            hv_ExpDefaultWinHandle = hwindow;
        }
        catch (System.Exception ex)
        {
            MessageBox.Show(ex.ToString());
            return;
        }
    }

    public void getImageFromCam(ushort nWidth, ushort nHeight, IntPtr m_BufForDriver)
    {
        HOperatorSet.GenImage1Extern(out ho_Image, "byte",nWidth, nHeight, m_BufForDriver, IntPtr.Zero);
    }
    // Procedures 
    // Chapter: Develop
    // Short Description: Open a new graphics window that preserves the aspect ratio of the given image. 
    public void dev_open_window_fit_image (HObject ho_Image, HTuple hv_Row, HTuple hv_Column, 
      HTuple hv_WidthLimit, HTuple hv_HeightLimit, out HTuple hv_WindowHandle)
  {




    // Local iconic variables 

    // Local control variables 

    HTuple hv_MinWidth = new HTuple(), hv_MaxWidth = new HTuple();
    HTuple hv_MinHeight = new HTuple(), hv_MaxHeight = new HTuple();
    HTuple hv_ResizeFactor = new HTuple(), hv_ImageWidth = new HTuple();
    HTuple hv_ImageHeight = new HTuple(), hv_TempWidth = new HTuple();
    HTuple hv_TempHeight = new HTuple(), hv_WindowWidth = new HTuple();
    HTuple hv_WindowHeight = new HTuple();
    // Initialize local and output iconic variables 
    hv_WindowHandle = new HTuple();
    try
    {
      //This procedure opens a new graphics window and adjusts the size
      //such that it fits into the limits specified by WidthLimit
      //and HeightLimit, but also maintains the correct image aspect ratio.
      //
      //If it is impossible to match the minimum and maximum extent requirements
      //at the same time (f.e. if the image is very long but narrow),
      //the maximum value gets a higher priority,
      //
      //Parse input tuple WidthLimit
      if ((int)((new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
          0))).TupleOr(new HTuple(hv_WidthLimit.TupleLess(0)))) != 0)
      {
        hv_MinWidth.Dispose();
        hv_MinWidth = 500;
        hv_MaxWidth.Dispose();
        hv_MaxWidth = 800;
      }
      else if ((int)(new HTuple((new HTuple(hv_WidthLimit.TupleLength())).TupleEqual(
          1))) != 0)
      {
        hv_MinWidth.Dispose();
        hv_MinWidth = 0;
        hv_MaxWidth.Dispose();
        hv_MaxWidth = new HTuple(hv_WidthLimit);
      }
      else
      {
        hv_MinWidth.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinWidth = hv_WidthLimit.TupleSelect(
            0);
        }
        hv_MaxWidth.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MaxWidth = hv_WidthLimit.TupleSelect(
            1);
        }
      }
      //Parse input tuple HeightLimit
      if ((int)((new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
          0))).TupleOr(new HTuple(hv_HeightLimit.TupleLess(0)))) != 0)
      {
        hv_MinHeight.Dispose();
        hv_MinHeight = 400;
        hv_MaxHeight.Dispose();
        hv_MaxHeight = 600;
      }
      else if ((int)(new HTuple((new HTuple(hv_HeightLimit.TupleLength())).TupleEqual(
          1))) != 0)
      {
        hv_MinHeight.Dispose();
        hv_MinHeight = 0;
        hv_MaxHeight.Dispose();
        hv_MaxHeight = new HTuple(hv_HeightLimit);
      }
      else
      {
        hv_MinHeight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MinHeight = hv_HeightLimit.TupleSelect(
            0);
        }
        hv_MaxHeight.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_MaxHeight = hv_HeightLimit.TupleSelect(
            1);
        }
      }
      //
      //Test, if window size has to be changed.
      hv_ResizeFactor.Dispose();
      hv_ResizeFactor = 1;
      hv_ImageWidth.Dispose();hv_ImageHeight.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      //First, expand window to the minimum extents (if necessary).
      if ((int)((new HTuple(hv_MinWidth.TupleGreater(hv_ImageWidth))).TupleOr(new HTuple(hv_MinHeight.TupleGreater(
          hv_ImageHeight)))) != 0)
      {
        hv_ResizeFactor.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_ResizeFactor = (((((hv_MinWidth.TupleReal()
            )/hv_ImageWidth)).TupleConcat((hv_MinHeight.TupleReal())/hv_ImageHeight))).TupleMax()
            ;
        }
      }
      hv_TempWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TempWidth = hv_ImageWidth*hv_ResizeFactor;
      }
      hv_TempHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_TempHeight = hv_ImageHeight*hv_ResizeFactor;
      }
      //Then, shrink window to maximum extents (if necessary).
      if ((int)((new HTuple(hv_MaxWidth.TupleLess(hv_TempWidth))).TupleOr(new HTuple(hv_MaxHeight.TupleLess(
          hv_TempHeight)))) != 0)
      {
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_ResizeFactor = hv_ResizeFactor*((((((hv_MaxWidth.TupleReal()
            )/hv_TempWidth)).TupleConcat((hv_MaxHeight.TupleReal())/hv_TempHeight))).TupleMin()
            );
        hv_ResizeFactor.Dispose();
        hv_ResizeFactor = ExpTmpLocalVar_ResizeFactor;
        }
        }
      }
      hv_WindowWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowWidth = hv_ImageWidth*hv_ResizeFactor;
      }
      hv_WindowHeight.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowHeight = hv_ImageHeight*hv_ResizeFactor;
      }
      //Resize window
      //dev_open_window(...);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetPart(hv_ExpDefaultWinHandle, 0, 0, hv_ImageHeight-1, hv_ImageWidth-1);
      }

      hv_MinWidth.Dispose();
      hv_MaxWidth.Dispose();
      hv_MinHeight.Dispose();
      hv_MaxHeight.Dispose();
      hv_ResizeFactor.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_TempWidth.Dispose();
      hv_TempHeight.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_MinWidth.Dispose();
      hv_MaxWidth.Dispose();
      hv_MinHeight.Dispose();
      hv_MaxHeight.Dispose();
      hv_ResizeFactor.Dispose();
      hv_ImageWidth.Dispose();
      hv_ImageHeight.Dispose();
      hv_TempWidth.Dispose();
      hv_TempHeight.Dispose();
      hv_WindowWidth.Dispose();
      hv_WindowHeight.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Chapter: XLD / Creation
  // Short Description: Creates an arrow shaped XLD contour. 
  public void gen_arrow_contour_xld (out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1, 
      HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_TempArrow=null;

    // Local control variables 

    HTuple hv_Length = new HTuple(), hv_ZeroLengthIndices = new HTuple();
    HTuple hv_DR = new HTuple(), hv_DC = new HTuple(), hv_HalfHeadWidth = new HTuple();
    HTuple hv_RowP1 = new HTuple(), hv_ColP1 = new HTuple();
    HTuple hv_RowP2 = new HTuple(), hv_ColP2 = new HTuple();
    HTuple hv_Index = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Arrow);
    HOperatorSet.GenEmptyObj(out ho_TempArrow);
    try
    {
      //This procedure generates arrow shaped XLD contours,
      //pointing from (Row1, Column1) to (Row2, Column2).
      //If starting and end point are identical, a contour consisting
      //of a single point is returned.
      //
      //input parameteres:
      //Row1, Column1: Coordinates of the arrows' starting points
      //Row2, Column2: Coordinates of the arrows' end points
      //HeadLength, HeadWidth: Size of the arrow heads in pixels
      //
      //output parameter:
      //Arrow: The resulting XLD contour
      //
      //The input tuples Row1, Column1, Row2, and Column2 have to be of
      //the same length.
      //HeadLength and HeadWidth either have to be of the same length as
      //Row1, Column1, Row2, and Column2 or have to be a single element.
      //If one of the above restrictions is violated, an error will occur.
      //
      //
      //Init
      ho_Arrow.Dispose();
      HOperatorSet.GenEmptyObj(out ho_Arrow);
      //
      //Calculate the arrow length
      hv_Length.Dispose();
      HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
      //
      //Mark arrows with identical start and end point
      //(set Length to -1 to avoid division-by-zero exception)
      hv_ZeroLengthIndices.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ZeroLengthIndices = hv_Length.TupleFind(
          0);
      }
      if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
      {
        if (hv_Length == null)
          hv_Length = new HTuple();
        hv_Length[hv_ZeroLengthIndices] = -1;
      }
      //
      //Calculate auxiliary variables.
      hv_DR.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DR = (1.0*(hv_Row2-hv_Row1))/hv_Length;
      }
      hv_DC.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_DC = (1.0*(hv_Column2-hv_Column1))/hv_Length;
      }
      hv_HalfHeadWidth.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_HalfHeadWidth = hv_HeadWidth/2.0;
      }
      //
      //Calculate end points of the arrow head.
      hv_RowP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP1 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))+(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP1 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))-(hv_HalfHeadWidth*hv_DR);
      }
      hv_RowP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_RowP2 = (hv_Row1+((hv_Length-hv_HeadLength)*hv_DR))-(hv_HalfHeadWidth*hv_DC);
      }
      hv_ColP2.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_ColP2 = (hv_Column1+((hv_Length-hv_HeadLength)*hv_DC))+(hv_HalfHeadWidth*hv_DR);
      }
      //
      //Finally create output XLD contour for each input point pair
      for (hv_Index=0; (int)hv_Index<=(int)((new HTuple(hv_Length.TupleLength()))-1); hv_Index = (int)hv_Index + 1)
      {
        if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
        {
          //Create_ single points for arrows with identical start and end point
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(
              hv_Index), hv_Column1.TupleSelect(hv_Index));
          }
        }
        else
        {
          //Create arrow contour
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          ho_TempArrow.Dispose();
          HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
              hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
              hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)), 
              ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
              hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
              hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
              hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
          }
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ConcatObj(ho_Arrow, ho_TempArrow, out ExpTmpOutVar_0);
        ho_Arrow.Dispose();
        ho_Arrow = ExpTmpOutVar_0;
        }
      }
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_TempArrow.Dispose();

      hv_Length.Dispose();
      hv_ZeroLengthIndices.Dispose();
      hv_DR.Dispose();
      hv_DC.Dispose();
      hv_HalfHeadWidth.Dispose();
      hv_RowP1.Dispose();
      hv_ColP1.Dispose();
      hv_RowP2.Dispose();
      hv_ColP2.Dispose();
      hv_Index.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Local procedures 
  public void action (HObject ho_Image, HTuple hv_WindowID, out HTuple hv_X1, out HTuple hv_Y1, 
      out HTuple hv_Pdegree, out HTuple hv_CirLen)
  {




    // Local iconic variables 

    HObject ho_Regions=null, ho_ConnectedRegions=null;
    HObject ho_SelectedRegions=null, ho_SelectedRegions1=null;
    HObject ho_Cross, ho_SelectedRegions2=null, ho_Cross1=null;
    HObject ho_ImageReduced, ho_Edges, ho_ContoursSplit, ho_SelectedXLD;
    HObject ho_ObjectSelected=null, ho_Contour1, ho_ContCircle;
    HObject ho_Cross3, ho_Contours=null, ho_Cross4=null, ho_Contour=null;
    HObject ho_Contours1=null, ho_Contour2=null, ho_Contour3=null;
    HObject ho_Cross2=null, ho_Arrow, ho_Arrow1;

    // Local control variables 

    HTuple hv_k = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Radius1 = new HTuple(), hv_Phi = new HTuple();
    HTuple hv_Exception = new HTuple(), hv_errstr = new HTuple();
    HTuple hv_Number = new HTuple(), hv_CircleRow = new HTuple();
    HTuple hv_CircleCol = new HTuple(), hv_Index1 = new HTuple();
    HTuple hv_Row10 = new HTuple(), hv_Col10 = new HTuple();
    HTuple hv_CircleX = new HTuple(), hv_CircleY = new HTuple();
    HTuple hv_Radius2 = new HTuple(), hv_StartPhi = new HTuple();
    HTuple hv_EndPhi = new HTuple(), hv_PointOrder = new HTuple();
    HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DRotate = new HTuple();
    HTuple hv_RowTrans2 = new HTuple(), hv_ColTrans2 = new HTuple();
    HTuple hv_RowTrans3 = new HTuple(), hv_ColTrans3 = new HTuple();
    HTuple hv_MetrologyHandle = new HTuple(), hv_Index = new HTuple();
    HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
    HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
    HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
    HTuple hv_RowTrans4 = new HTuple(), hv_ColTrans4 = new HTuple();
    HTuple hv_RowTrans5 = new HTuple(), hv_ColTrans5 = new HTuple();
    HTuple hv_MetrologyHandle1 = new HTuple(), hv_Row3 = new HTuple();
    HTuple hv_Column3 = new HTuple(), hv_RowBegin1 = new HTuple();
    HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
    HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
    HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
    HTuple hv_CenterRow = new HTuple(), hv_CenterColumn = new HTuple();
    HTuple hv_IsOverlapping = new HTuple(), hv_CenterPhi = new HTuple();
    HTuple hv_RowProj = new HTuple(), hv_ColProj = new HTuple();
    HTuple hv_RowProj1 = new HTuple(), hv_ColProj1 = new HTuple();
    HTuple hv_Distance = new HTuple(), hv_Distance1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_Cross);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_Cross1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
    HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_Contour1);
    HOperatorSet.GenEmptyObj(out ho_ContCircle);
    HOperatorSet.GenEmptyObj(out ho_Cross3);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_Cross4);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_Contours1);
    HOperatorSet.GenEmptyObj(out ho_Contour2);
    HOperatorSet.GenEmptyObj(out ho_Contour3);
    HOperatorSet.GenEmptyObj(out ho_Cross2);
    HOperatorSet.GenEmptyObj(out ho_Arrow);
    HOperatorSet.GenEmptyObj(out ho_Arrow1);
    hv_X1 = new HTuple();
    hv_Y1 = new HTuple();
    hv_Pdegree = new HTuple();
    hv_CirLen = new HTuple();
    try
    {
      try
      {
        hv_k.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_k = 6576/62.1;
        }
        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_Image, out ho_Regions, 81, 255);
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
            "and", 321101, 1.42202e+006);

        //取两圆心之间的角度
        ho_SelectedRegions1.Dispose();
        HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, "area", 
            "and", 832110, 906789);
        hv_Row.Dispose();hv_Column.Dispose();hv_Radius.Dispose();
        HOperatorSet.SmallestCircle(ho_SelectedRegions1, out hv_Row, out hv_Column, 
            out hv_Radius);
        //gen_cross_contour_xld (Cross, Row, Column, 106, 0.785398)

        ho_SelectedRegions2.Dispose();
        HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area", 
            "and", 600917, 637615);
        hv_Row1.Dispose();hv_Column1.Dispose();hv_Radius1.Dispose();
        HOperatorSet.SmallestCircle(ho_SelectedRegions2, out hv_Row1, out hv_Column1, 
            out hv_Radius1);
        //gen_cross_contour_xld (Cross1, Row1, Column1, 106, 0.785398)
        hv_Phi.Dispose();
        HOperatorSet.LineOrientation(hv_Row, hv_Column, hv_Row1, hv_Column1, out hv_Phi);
        if ((int)(new HTuple(hv_Column.TupleGreater(hv_Column1))) != 0)
        {
          using (HDevDisposeHelper dh = new HDevDisposeHelper())
          {
          {
          HTuple 
            ExpTmpLocalVar_Phi = hv_Phi+((new HTuple(180)).TupleRad()
              );
          hv_Phi.Dispose();
          hv_Phi = ExpTmpLocalVar_Phi;
          }
          }
        }
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_errstr.Dispose();
        hv_errstr = "blog找圆异常！";
      }

      //圆
      ho_SelectedRegions2.Dispose();
      HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area", 
          "and", 600917, 637615);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Image, ho_SelectedRegions2, out ho_ImageReduced
          );

      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 50);
      ho_ContoursSplit.Dispose();
      HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles", 
          5, 4, 2);

      ho_SelectedXLD.Dispose();
      HOperatorSet.SelectShapeXld(ho_ContoursSplit, out ho_SelectedXLD, (new HTuple("contlength")).TupleConcat(
          "circularity"), "and", (new HTuple(205.05)).TupleConcat(0.03798), (new HTuple(500)).TupleConcat(
          0.2));
      hv_Number.Dispose();
      HOperatorSet.CountObj(ho_SelectedXLD, out hv_Number);
      hv_CircleRow.Dispose();
      hv_CircleRow = new HTuple();
      hv_CircleCol.Dispose();
      hv_CircleCol = new HTuple();
      HTuple end_val33 = hv_Number;
      HTuple step_val33 = 1;
      for (hv_Index1=1; hv_Index1.Continue(end_val33, step_val33); hv_Index1 = hv_Index1.TupleAdd(step_val33))
      {
        ho_ObjectSelected.Dispose();
        HOperatorSet.SelectObj(ho_SelectedXLD, out ho_ObjectSelected, hv_Index1);
        hv_Row10.Dispose();hv_Col10.Dispose();
        HOperatorSet.GetContourXld(ho_ObjectSelected, out hv_Row10, out hv_Col10);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_CircleRow = hv_CircleRow.TupleConcat(
            hv_Row10);
        hv_CircleRow.Dispose();
        hv_CircleRow = ExpTmpLocalVar_CircleRow;
        }
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        {
        HTuple 
          ExpTmpLocalVar_CircleCol = hv_CircleCol.TupleConcat(
            hv_Col10);
        hv_CircleCol.Dispose();
        hv_CircleCol = ExpTmpLocalVar_CircleCol;
        }
        }
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      ho_Cross.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row10, hv_Col10, 6, (new HTuple(45)).TupleRad()
          );
      }
      ho_Contour1.Dispose();
      HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_CircleRow, hv_CircleCol);
      hv_CircleX.Dispose();hv_CircleY.Dispose();hv_Radius2.Dispose();hv_StartPhi.Dispose();hv_EndPhi.Dispose();hv_PointOrder.Dispose();
      HOperatorSet.FitCircleContourXld(ho_Contour1, "algebraic", -1, 0, 0, 3, 2, 
          out hv_CircleX, out hv_CircleY, out hv_Radius2, out hv_StartPhi, out hv_EndPhi, 
          out hv_PointOrder);
      ho_ContCircle.Dispose();
      HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_CircleX, hv_CircleY, 
          hv_Radius2, 0, 6.28, "positive", 1);
      ho_Cross3.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_CircleX, hv_CircleY, 106, 
          hv_StartPhi);
      hv_CirLen.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_CirLen = (hv_Radius2/hv_k)*2;
      }

      try
      {
        hv_HomMat2DIdentity.Dispose();
        HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_HomMat2DRotate.Dispose();
        HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, -hv_Phi, hv_Column1, hv_Row1, 
            out hv_HomMat2DRotate);
        }


        //x轴
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RowTrans2.Dispose();hv_ColTrans2.Dispose();
        HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1-1500.22)+640, 
            hv_Row1+722, out hv_RowTrans2, out hv_ColTrans2);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RowTrans3.Dispose();hv_ColTrans3.Dispose();
        HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1-1500.22)-640, 
            hv_Row1+722, out hv_RowTrans3, out hv_ColTrans3);
        }
        hv_MetrologyHandle.Dispose();
        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
        hv_Index.Dispose();
        HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_ColTrans3, 
            hv_RowTrans3, hv_ColTrans2, hv_RowTrans2, 15, 10, 1, 20, new HTuple(), 
            new HTuple(), out hv_Index);
        HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
        ho_Contours.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
        HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle, 
            "all", "all", out hv_Row2, out hv_Column2);
        ho_Cross4.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_Row2, hv_Column2, 16, hv_Phi);
        ho_Contour.Dispose();
        HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Row2, hv_Column2);
        hv_RowBegin.Dispose();hv_ColBegin.Dispose();hv_RowEnd.Dispose();hv_ColEnd.Dispose();hv_Nr.Dispose();hv_Nc.Dispose();hv_Dist.Dispose();
        HOperatorSet.FitLineContourXld(ho_Contour, "tukey", -1, 0, 5, 2, out hv_RowBegin, 
            out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc, 
            out hv_Dist);
        //y轴
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RowTrans4.Dispose();hv_ColTrans4.Dispose();
        HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1+562.397, hv_Row1+450, 
            out hv_RowTrans4, out hv_ColTrans4);
        }
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        hv_RowTrans5.Dispose();hv_ColTrans5.Dispose();
        HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1+562.397, hv_Row1-450, 
            out hv_RowTrans5, out hv_ColTrans5);
        }
        hv_MetrologyHandle1.Dispose();
        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
        hv_Index1.Dispose();
        HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle1, hv_ColTrans5, 
            hv_RowTrans5, hv_ColTrans4, hv_RowTrans4, 15, 10, 1, 30, new HTuple(), 
            new HTuple(), out hv_Index1);
        HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
        ho_Contours1.Dispose();hv_Row3.Dispose();hv_Column3.Dispose();
        HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours1, hv_MetrologyHandle1, 
            "all", "all", out hv_Row3, out hv_Column3);
        ho_Cross1.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_Row3, hv_Column3, 16, hv_Phi);
        ho_Contour2.Dispose();
        HOperatorSet.GenContourPolygonXld(out ho_Contour2, hv_Row3, hv_Column3);
        hv_RowBegin1.Dispose();hv_ColBegin1.Dispose();hv_RowEnd1.Dispose();hv_ColEnd1.Dispose();hv_Nr1.Dispose();hv_Nc1.Dispose();hv_Dist1.Dispose();
        HOperatorSet.FitLineContourXld(ho_Contour2, "tukey", -1, 0, 5, 2, out hv_RowBegin1, 
            out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1, 
            out hv_Dist1);

        //gen_region_line (RegionLines, RowBegin1, ColBegin1, RowEnd1, ColEnd1)
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
        ho_Contour3.Dispose();
        HOperatorSet.GenContourPolygonXld(out ho_Contour3, hv_RowBegin1.TupleConcat(
            hv_RowEnd1), hv_ColBegin1.TupleConcat(hv_ColEnd1));
        }

        //坐标轴中心点
        hv_CenterRow.Dispose();hv_CenterColumn.Dispose();hv_IsOverlapping.Dispose();
        HOperatorSet.IntersectionLines(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 
            hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, hv_ColEnd1, out hv_CenterRow, 
            out hv_CenterColumn, out hv_IsOverlapping);
        ho_Cross2.Dispose();
        HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_CenterRow, hv_CenterColumn, 
            106, hv_Phi);
        hv_CenterPhi.Dispose();
        HOperatorSet.LineOrientation(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 
            out hv_CenterPhi);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        hv_errstr.Dispose();
        hv_errstr = "坐标系建立异常！";
      }



      hv_RowProj.Dispose();hv_ColProj.Dispose();
      HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin, 
          hv_RowEnd, hv_ColEnd, out hv_RowProj, out hv_ColProj);
      //gen_cross_contour_xld (Cross1, RowProj, ColProj, 106, CenterPhi)
      hv_RowProj1.Dispose();hv_ColProj1.Dispose();
      HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1, 
          hv_RowEnd1, hv_ColEnd1, out hv_RowProj1, out hv_ColProj1);
      //gen_cross_contour_xld (Cross4, RowProj1, ColProj1, 106, CenterPhi)

      ho_Arrow.Dispose();
      gen_arrow_contour_xld(out ho_Arrow, hv_CircleX, hv_CircleY, hv_RowProj, hv_ColProj, 
          15, 15);
      ho_Arrow1.Dispose();
      gen_arrow_contour_xld(out ho_Arrow1, hv_CircleX, hv_CircleY, hv_RowProj1, hv_ColProj1, 
          15, 15);
      //距离
      hv_Distance.Dispose();
      HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin, hv_RowEnd, 
          hv_ColEnd, out hv_Distance);
      hv_Distance1.Dispose();
      HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1, 
          hv_RowEnd1, hv_ColEnd1, out hv_Distance1);

      hv_X1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_X1 = hv_Distance1/hv_k;
      }
      hv_Y1.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Y1 = hv_Distance/hv_k;
      }
      hv_Pdegree.Dispose();
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_Pdegree = 2*((((((hv_X1-5.325)).TuplePow(
          2))+(((hv_Y1-6.788)).TuplePow(2)))).TupleSqrt());
      }
      //圆上4点
      //LenY1 := 8.331
      //LenY2 := 2.319
      //LenX1 := 3.782
      //LenX2 := 9.794
      //* PY1 :=  CenterColumn - LenY2*k
      //* PY2 := CenterColumn- LenY1*k
      //* PX1 := CenterRow - LenX1*k
      //* PX2 := CenterRow - LenX2*k
      //hom_mat2d_identity (HomMat2DIdentity1)
      //* hom_mat2d_rotate (HomMat2DIdentity1, -CenterPhi, CenterColumn, CenterRow, HomMat2DRotate1)
      //* affine_trans_pixel (HomMat2DRotate1, PY1, PX1, RowTrans, ColTrans)
      //* gen_cross_contour_xld (Cross11, ColTrans, RowTrans, 106, CenterPhi)
      //* affine_trans_pixel (HomMat2DRotate1, PY1, PX2, RowTrans1, ColTrans1)
      //* gen_cross_contour_xld (Cross12, ColTrans1, RowTrans1, 106, CenterPhi)
      //* affine_trans_pixel (HomMat2DRotate1, PY2, PX1, RowTrans6, ColTrans6)
      //* gen_cross_contour_xld (Cross13, ColTrans6, RowTrans6, 106, CenterPhi)
      //* affine_trans_pixel (HomMat2DRotate1,  PY2, PX2, RowTrans7, ColTrans7)
      //* gen_cross_contour_xld (Cross14, ColTrans7, RowTrans7, 106, CenterPhi)

      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
      HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);

      HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Contour, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Contour3, hv_ExpDefaultWinHandle);

      HOperatorSet.DispObj(ho_Cross2, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Cross3, hv_ExpDefaultWinHandle);

      HOperatorSet.DispObj(ho_Arrow, hv_ExpDefaultWinHandle);
      HOperatorSet.DispObj(ho_Arrow1, hv_ExpDefaultWinHandle);

      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, 100, 100);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, (((((("X1 = "+hv_X1)+"\tY1 = ")+hv_Y1)+"\tDg = ")+hv_Pdegree)+"\tconLen = ")+hv_CirLen);
      }
      X2 = hv_X1; Y2 = hv_Y1; DG = hv_Pdegree; CircleRadius = hv_CirLen;
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_Cross.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Cross1.Dispose();
      ho_ImageReduced.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_SelectedXLD.Dispose();
      ho_ObjectSelected.Dispose();
      ho_Contour1.Dispose();
      ho_ContCircle.Dispose();
      ho_Cross3.Dispose();
      ho_Contours.Dispose();
      ho_Cross4.Dispose();
      ho_Contour.Dispose();
      ho_Contours1.Dispose();
      ho_Contour2.Dispose();
      ho_Contour3.Dispose();
      ho_Cross2.Dispose();
      ho_Arrow.Dispose();
      ho_Arrow1.Dispose();

      hv_k.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Radius1.Dispose();
      hv_Phi.Dispose();
      hv_Exception.Dispose();
      hv_errstr.Dispose();
      hv_Number.Dispose();
      hv_CircleRow.Dispose();
      hv_CircleCol.Dispose();
      hv_Index1.Dispose();
      hv_Row10.Dispose();
      hv_Col10.Dispose();
      hv_CircleX.Dispose();
      hv_CircleY.Dispose();
      hv_Radius2.Dispose();
      hv_StartPhi.Dispose();
      hv_EndPhi.Dispose();
      hv_PointOrder.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DRotate.Dispose();
      hv_RowTrans2.Dispose();
      hv_ColTrans2.Dispose();
      hv_RowTrans3.Dispose();
      hv_ColTrans3.Dispose();
      hv_MetrologyHandle.Dispose();
      hv_Index.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();
      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_RowTrans4.Dispose();
      hv_ColTrans4.Dispose();
      hv_RowTrans5.Dispose();
      hv_ColTrans5.Dispose();
      hv_MetrologyHandle1.Dispose();
      hv_Row3.Dispose();
      hv_Column3.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterColumn.Dispose();
      hv_IsOverlapping.Dispose();
      hv_CenterPhi.Dispose();
      hv_RowProj.Dispose();
      hv_ColProj.Dispose();
      hv_RowProj1.Dispose();
      hv_ColProj1.Dispose();
      hv_Distance.Dispose();
      hv_Distance1.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Regions.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_SelectedRegions.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_Cross.Dispose();
      ho_SelectedRegions2.Dispose();
      ho_Cross1.Dispose();
      ho_ImageReduced.Dispose();
      ho_Edges.Dispose();
      ho_ContoursSplit.Dispose();
      ho_SelectedXLD.Dispose();
      ho_ObjectSelected.Dispose();
      ho_Contour1.Dispose();
      ho_ContCircle.Dispose();
      ho_Cross3.Dispose();
      ho_Contours.Dispose();
      ho_Cross4.Dispose();
      ho_Contour.Dispose();
      ho_Contours1.Dispose();
      ho_Contour2.Dispose();
      ho_Contour3.Dispose();
      ho_Cross2.Dispose();
      ho_Arrow.Dispose();
      ho_Arrow1.Dispose();

      hv_k.Dispose();
      hv_Row.Dispose();
      hv_Column.Dispose();
      hv_Radius.Dispose();
      hv_Row1.Dispose();
      hv_Column1.Dispose();
      hv_Radius1.Dispose();
      hv_Phi.Dispose();
      hv_Exception.Dispose();
      hv_errstr.Dispose();
      hv_Number.Dispose();
      hv_CircleRow.Dispose();
      hv_CircleCol.Dispose();
      hv_Index1.Dispose();
      hv_Row10.Dispose();
      hv_Col10.Dispose();
      hv_CircleX.Dispose();
      hv_CircleY.Dispose();
      hv_Radius2.Dispose();
      hv_StartPhi.Dispose();
      hv_EndPhi.Dispose();
      hv_PointOrder.Dispose();
      hv_HomMat2DIdentity.Dispose();
      hv_HomMat2DRotate.Dispose();
      hv_RowTrans2.Dispose();
      hv_ColTrans2.Dispose();
      hv_RowTrans3.Dispose();
      hv_ColTrans3.Dispose();
      hv_MetrologyHandle.Dispose();
      hv_Index.Dispose();
      hv_Row2.Dispose();
      hv_Column2.Dispose();
      hv_RowBegin.Dispose();
      hv_ColBegin.Dispose();
      hv_RowEnd.Dispose();
      hv_ColEnd.Dispose();
      hv_Nr.Dispose();
      hv_Nc.Dispose();
      hv_Dist.Dispose();
      hv_RowTrans4.Dispose();
      hv_ColTrans4.Dispose();
      hv_RowTrans5.Dispose();
      hv_ColTrans5.Dispose();
      hv_MetrologyHandle1.Dispose();
      hv_Row3.Dispose();
      hv_Column3.Dispose();
      hv_RowBegin1.Dispose();
      hv_ColBegin1.Dispose();
      hv_RowEnd1.Dispose();
      hv_ColEnd1.Dispose();
      hv_Nr1.Dispose();
      hv_Nc1.Dispose();
      hv_Dist1.Dispose();
      hv_CenterRow.Dispose();
      hv_CenterColumn.Dispose();
      hv_IsOverlapping.Dispose();
      hv_CenterPhi.Dispose();
      hv_RowProj.Dispose();
      hv_ColProj.Dispose();
      hv_RowProj1.Dispose();
      hv_ColProj1.Dispose();
      hv_Distance.Dispose();
      hv_Distance1.Dispose();

      throw HDevExpDefaultException;
    }
  }

    public void action(HObject ho_Image, out HTuple hv_X1, out HTuple hv_Y1,
    out HTuple hv_Pdegree, out HTuple hv_CirLen)
    {
        IsErrHappen = 0;
        hv_X1 = new HTuple();
        hv_Y1 = new HTuple();
        hv_Pdegree = new HTuple();
        hv_CirLen = new HTuple();
        HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
        HTuple hv_WindowID = new HTuple();
        try
        {
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_WindowID.Dispose();
                dev_open_window_fit_image(ho_Image, 0, 0, hv_Width / 10, hv_Height / 10, out hv_WindowID);
            }
        }
        catch (HalconException HDevExpDefaultException1)
        {
            IsErrHappen = 1;
            errStr = "无输入图片";
            return;
        }






        // Local iconic variables 

        HObject ho_Regions = null, ho_ConnectedRegions = null;
        HObject ho_SelectedRegions = null, ho_SelectedRegions1 = null;
        HObject ho_Cross, ho_SelectedRegions2 = null, ho_Cross1 = null;
        HObject ho_ImageReduced, ho_Edges, ho_ContoursSplit, ho_SelectedXLD;
        HObject ho_ObjectSelected = null, ho_Contour1, ho_ContCircle;
        HObject ho_Cross3, ho_Contours = null, ho_Cross4 = null, ho_Contour = null;
        HObject ho_Contours1 = null, ho_Contour2 = null, ho_Contour3 = null;
        HObject ho_Cross2 = null, ho_Arrow, ho_Arrow1;

        // Local control variables 

        HTuple hv_k = new HTuple(), hv_Row = new HTuple();
        HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
        HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
        HTuple hv_Radius1 = new HTuple(), hv_Phi = new HTuple();
        HTuple hv_Exception = new HTuple(), hv_errstr = new HTuple();
        HTuple hv_Number = new HTuple(), hv_CircleRow = new HTuple();
        HTuple hv_CircleCol = new HTuple(), hv_Index1 = new HTuple();
        HTuple hv_Row10 = new HTuple(), hv_Col10 = new HTuple();
        HTuple hv_CircleX = new HTuple(), hv_CircleY = new HTuple();
        HTuple hv_Radius2 = new HTuple(), hv_StartPhi = new HTuple();
        HTuple hv_EndPhi = new HTuple(), hv_PointOrder = new HTuple();
        HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DRotate = new HTuple();
        HTuple hv_RowTrans2 = new HTuple(), hv_ColTrans2 = new HTuple();
        HTuple hv_RowTrans3 = new HTuple(), hv_ColTrans3 = new HTuple();
        HTuple hv_MetrologyHandle = new HTuple(), hv_Index = new HTuple();
        HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
        HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
        HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
        HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
        HTuple hv_RowTrans4 = new HTuple(), hv_ColTrans4 = new HTuple();
        HTuple hv_RowTrans5 = new HTuple(), hv_ColTrans5 = new HTuple();
        HTuple hv_MetrologyHandle1 = new HTuple(), hv_Row3 = new HTuple();
        HTuple hv_Column3 = new HTuple(), hv_RowBegin1 = new HTuple();
        HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
        HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
        HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
        HTuple hv_CenterRow = new HTuple(), hv_CenterColumn = new HTuple();
        HTuple hv_IsOverlapping = new HTuple(), hv_CenterPhi = new HTuple();
        HTuple hv_RowProj = new HTuple(), hv_ColProj = new HTuple();
        HTuple hv_RowProj1 = new HTuple(), hv_ColProj1 = new HTuple();
        HTuple hv_Distance = new HTuple(), hv_Distance1 = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_Cross);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_Cross1);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Edges);
        HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
        HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
        HOperatorSet.GenEmptyObj(out ho_Contour1);
        HOperatorSet.GenEmptyObj(out ho_ContCircle);
        HOperatorSet.GenEmptyObj(out ho_Cross3);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_Cross4);
        HOperatorSet.GenEmptyObj(out ho_Contour);
        HOperatorSet.GenEmptyObj(out ho_Contours1);
        HOperatorSet.GenEmptyObj(out ho_Contour2);
        HOperatorSet.GenEmptyObj(out ho_Contour3);
        HOperatorSet.GenEmptyObj(out ho_Cross2);
        HOperatorSet.GenEmptyObj(out ho_Arrow);
        HOperatorSet.GenEmptyObj(out ho_Arrow1);

        try
        {
            try
            {
                hv_k.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_k = 6576 / 62.1;
                }
                ho_Regions.Dispose();
                HOperatorSet.Threshold(ho_Image, out ho_Regions, 81, 255);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
                    "and", 321101, 1.42202e+006);

                //取两圆心之间的角度
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, "area",
                    "and", 832110, 906789);
                hv_Row.Dispose(); hv_Column.Dispose(); hv_Radius.Dispose();
                HOperatorSet.SmallestCircle(ho_SelectedRegions1, out hv_Row, out hv_Column,
                    out hv_Radius);
                //gen_cross_contour_xld (Cross, Row, Column, 106, 0.785398)

                ho_SelectedRegions2.Dispose();
                HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area",
                    "and", 600917, 637615);
                hv_Row1.Dispose(); hv_Column1.Dispose(); hv_Radius1.Dispose();
                HOperatorSet.SmallestCircle(ho_SelectedRegions2, out hv_Row1, out hv_Column1,
                    out hv_Radius1);
                //gen_cross_contour_xld (Cross1, Row1, Column1, 106, 0.785398)
                hv_Phi.Dispose();
                HOperatorSet.LineOrientation(hv_Row, hv_Column, hv_Row1, hv_Column1, out hv_Phi);
                if ((int)(new HTuple(hv_Column.TupleGreater(hv_Column1))) != 0)
                {
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        {
                            HTuple
                              ExpTmpLocalVar_Phi = hv_Phi + ((new HTuple(180)).TupleRad()
                                );
                            hv_Phi.Dispose();
                            hv_Phi = ExpTmpLocalVar_Phi;
                        }
                    }
                }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                IsErrHappen = 1;
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                errStr = "blog找圆异常！";
                return;
            }

            //圆
            ho_SelectedRegions2.Dispose();
            HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area",
                "and", 600917, 637615);
            ho_ImageReduced.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_SelectedRegions2, out ho_ImageReduced
                );

            ho_Edges.Dispose();
            HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 50);
            ho_ContoursSplit.Dispose();
            HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles",
                5, 4, 2);

            ho_SelectedXLD.Dispose();
            HOperatorSet.SelectShapeXld(ho_ContoursSplit, out ho_SelectedXLD, (new HTuple("contlength")).TupleConcat(
                "circularity"), "and", (new HTuple(205.05)).TupleConcat(0.03798), (new HTuple(500)).TupleConcat(
                0.2));
            hv_Number.Dispose();
            HOperatorSet.CountObj(ho_SelectedXLD, out hv_Number);
            hv_CircleRow.Dispose();
            hv_CircleRow = new HTuple();
            hv_CircleCol.Dispose();
            hv_CircleCol = new HTuple();
            HTuple end_val33 = hv_Number;
            HTuple step_val33 = 1;
            for (hv_Index1 = 1; hv_Index1.Continue(end_val33, step_val33); hv_Index1 = hv_Index1.TupleAdd(step_val33))
            {
                ho_ObjectSelected.Dispose();
                HOperatorSet.SelectObj(ho_SelectedXLD, out ho_ObjectSelected, hv_Index1);
                hv_Row10.Dispose(); hv_Col10.Dispose();
                HOperatorSet.GetContourXld(ho_ObjectSelected, out hv_Row10, out hv_Col10);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_CircleRow = hv_CircleRow.TupleConcat(
                            hv_Row10);
                        hv_CircleRow.Dispose();
                        hv_CircleRow = ExpTmpLocalVar_CircleRow;
                    }
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_CircleCol = hv_CircleCol.TupleConcat(
                            hv_Col10);
                        hv_CircleCol.Dispose();
                        hv_CircleCol = ExpTmpLocalVar_CircleCol;
                    }
                }
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                ho_Cross.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row10, hv_Col10, 6, (new HTuple(45)).TupleRad()
                    );
            }
            ho_Contour1.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_CircleRow, hv_CircleCol);
            hv_CircleX.Dispose(); hv_CircleY.Dispose(); hv_Radius2.Dispose(); hv_StartPhi.Dispose(); hv_EndPhi.Dispose(); hv_PointOrder.Dispose();
            HOperatorSet.FitCircleContourXld(ho_Contour1, "algebraic", -1, 0, 0, 3, 2,
                out hv_CircleX, out hv_CircleY, out hv_Radius2, out hv_StartPhi, out hv_EndPhi,
                out hv_PointOrder);
            ho_ContCircle.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_CircleX, hv_CircleY,
                hv_Radius2, 0, 6.28, "positive", 1);
            ho_Cross3.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_CircleX, hv_CircleY, 106,
                hv_StartPhi);
            hv_CirLen.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_CirLen = (hv_Radius2 / hv_k) * 2;
            }

            try
            {
                hv_HomMat2DIdentity.Dispose();
                HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_HomMat2DRotate.Dispose();
                    HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, -hv_Phi, hv_Column1, hv_Row1,
                        out hv_HomMat2DRotate);
                }


                //x轴
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans2.Dispose(); hv_ColTrans2.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1 - 1500.22) + 640,
                        hv_Row1 + 722, out hv_RowTrans2, out hv_ColTrans2);
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans3.Dispose(); hv_ColTrans3.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1 - 1500.22) - 640,
                        hv_Row1 + 722, out hv_RowTrans3, out hv_ColTrans3);
                }
                hv_MetrologyHandle.Dispose();
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                hv_Index.Dispose();
                HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_ColTrans3,
                    hv_RowTrans3, hv_ColTrans2, hv_RowTrans2, 15, 10, 1, 20, new HTuple(),
                    new HTuple(), out hv_Index);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
                ho_Contours.Dispose(); hv_Row2.Dispose(); hv_Column2.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle,
                    "all", "all", out hv_Row2, out hv_Column2);
                ho_Cross4.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_Row2, hv_Column2, 16, hv_Phi);
                ho_Contour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Row2, hv_Column2);
                hv_RowBegin.Dispose(); hv_ColBegin.Dispose(); hv_RowEnd.Dispose(); hv_ColEnd.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
                HOperatorSet.FitLineContourXld(ho_Contour, "tukey", -1, 0, 5, 2, out hv_RowBegin,
                    out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc,
                    out hv_Dist);
                //y轴
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans4.Dispose(); hv_ColTrans4.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1 + 562.397, hv_Row1 + 450,
                        out hv_RowTrans4, out hv_ColTrans4);
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans5.Dispose(); hv_ColTrans5.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1 + 562.397, hv_Row1 - 450,
                        out hv_RowTrans5, out hv_ColTrans5);
                }
                hv_MetrologyHandle1.Dispose();
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
                hv_Index1.Dispose();
                HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle1, hv_ColTrans5,
                    hv_RowTrans5, hv_ColTrans4, hv_RowTrans4, 15, 10, 1, 30, new HTuple(),
                    new HTuple(), out hv_Index1);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
                ho_Contours1.Dispose(); hv_Row3.Dispose(); hv_Column3.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours1, hv_MetrologyHandle1,
                    "all", "all", out hv_Row3, out hv_Column3);
                ho_Cross1.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_Row3, hv_Column3, 16, hv_Phi);
                ho_Contour2.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Contour2, hv_Row3, hv_Column3);
                hv_RowBegin1.Dispose(); hv_ColBegin1.Dispose(); hv_RowEnd1.Dispose(); hv_ColEnd1.Dispose(); hv_Nr1.Dispose(); hv_Nc1.Dispose(); hv_Dist1.Dispose();
                HOperatorSet.FitLineContourXld(ho_Contour2, "tukey", -1, 0, 5, 2, out hv_RowBegin1,
                    out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1,
                    out hv_Dist1);

                //gen_region_line (RegionLines, RowBegin1, ColBegin1, RowEnd1, ColEnd1)
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    ho_Contour3.Dispose();
                    HOperatorSet.GenContourPolygonXld(out ho_Contour3, hv_RowBegin1.TupleConcat(
                        hv_RowEnd1), hv_ColBegin1.TupleConcat(hv_ColEnd1));
                }

                //坐标轴中心点
                hv_CenterRow.Dispose(); hv_CenterColumn.Dispose(); hv_IsOverlapping.Dispose();
                HOperatorSet.IntersectionLines(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd,
                    hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, hv_ColEnd1, out hv_CenterRow,
                    out hv_CenterColumn, out hv_IsOverlapping);
                ho_Cross2.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_CenterRow, hv_CenterColumn,
                    106, hv_Phi);
                hv_CenterPhi.Dispose();
                HOperatorSet.LineOrientation(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd,
                    out hv_CenterPhi);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                IsErrHappen = 1;
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                errStr = "坐标系建立异常！";
                return;
            }



            hv_RowProj.Dispose(); hv_ColProj.Dispose();
            HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin,
                hv_RowEnd, hv_ColEnd, out hv_RowProj, out hv_ColProj);
            //gen_cross_contour_xld (Cross1, RowProj, ColProj, 106, CenterPhi)
            hv_RowProj1.Dispose(); hv_ColProj1.Dispose();
            HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1,
                hv_RowEnd1, hv_ColEnd1, out hv_RowProj1, out hv_ColProj1);
            //gen_cross_contour_xld (Cross4, RowProj1, ColProj1, 106, CenterPhi)

            ho_Arrow.Dispose();
            gen_arrow_contour_xld(out ho_Arrow, hv_CircleX, hv_CircleY, hv_RowProj, hv_ColProj,
                15, 15);
            ho_Arrow1.Dispose();
            gen_arrow_contour_xld(out ho_Arrow1, hv_CircleX, hv_CircleY, hv_RowProj1, hv_ColProj1,
                15, 15);
            //距离
            hv_Distance.Dispose();
            HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin, hv_RowEnd,
                hv_ColEnd, out hv_Distance);
            hv_Distance1.Dispose();
            HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1,
                hv_RowEnd1, hv_ColEnd1, out hv_Distance1);

            hv_X1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_X1 = hv_Distance1 / hv_k;
            }
            hv_Y1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Y1 = hv_Distance / hv_k;
            }
            hv_Pdegree.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Pdegree = 2 * ((((((hv_X1 - 5.325)).TuplePow(
                    2)) + (((hv_Y1 - 6.788)).TuplePow(2)))).TupleSqrt());
            }
            //圆上4点
            //LenY1 := 8.331
            //LenY2 := 2.319
            //LenX1 := 3.782
            //LenX2 := 9.794
            //* PY1 :=  CenterColumn - LenY2*k
            //* PY2 := CenterColumn- LenY1*k
            //* PX1 := CenterRow - LenX1*k
            //* PX2 := CenterRow - LenX2*k
            //hom_mat2d_identity (HomMat2DIdentity1)
            //* hom_mat2d_rotate (HomMat2DIdentity1, -CenterPhi, CenterColumn, CenterRow, HomMat2DRotate1)
            //* affine_trans_pixel (HomMat2DRotate1, PY1, PX1, RowTrans, ColTrans)
            //* gen_cross_contour_xld (Cross11, ColTrans, RowTrans, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1, PY1, PX2, RowTrans1, ColTrans1)
            //* gen_cross_contour_xld (Cross12, ColTrans1, RowTrans1, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1, PY2, PX1, RowTrans6, ColTrans6)
            //* gen_cross_contour_xld (Cross13, ColTrans6, RowTrans6, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1,  PY2, PX2, RowTrans7, ColTrans7)
            //* gen_cross_contour_xld (Cross14, ColTrans7, RowTrans7, 106, CenterPhi)

            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);

            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Contour, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Contour3, hv_ExpDefaultWinHandle);

            HOperatorSet.DispObj(ho_Cross2, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Cross3, hv_ExpDefaultWinHandle);

            HOperatorSet.DispObj(ho_Arrow, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Arrow1, hv_ExpDefaultWinHandle);

            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, 100, 100);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                HOperatorSet.WriteString(hv_ExpDefaultWinHandle, (((((("X1 = " + hv_X1) + "\tY1 = ") + hv_Y1) + "\tDg = ") + hv_Pdegree) + "\tconLen = ") + hv_CirLen);
            }
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Cross.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_Cross1.Dispose();
            ho_ImageReduced.Dispose();
            ho_Edges.Dispose();
            ho_ContoursSplit.Dispose();
            ho_SelectedXLD.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Contour1.Dispose();
            ho_ContCircle.Dispose();
            ho_Cross3.Dispose();
            ho_Contours.Dispose();
            ho_Cross4.Dispose();
            ho_Contour.Dispose();
            ho_Contours1.Dispose();
            ho_Contour2.Dispose();
            ho_Contour3.Dispose();
            ho_Cross2.Dispose();
            ho_Arrow.Dispose();
            ho_Arrow1.Dispose();

            hv_k.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Radius.Dispose();
            hv_Row1.Dispose();
            hv_Column1.Dispose();
            hv_Radius1.Dispose();
            hv_Phi.Dispose();
            hv_Exception.Dispose();
            hv_errstr.Dispose();
            hv_Number.Dispose();
            hv_CircleRow.Dispose();
            hv_CircleCol.Dispose();
            hv_Index1.Dispose();
            hv_Row10.Dispose();
            hv_Col10.Dispose();
            hv_CircleX.Dispose();
            hv_CircleY.Dispose();
            hv_Radius2.Dispose();
            hv_StartPhi.Dispose();
            hv_EndPhi.Dispose();
            hv_PointOrder.Dispose();
            hv_HomMat2DIdentity.Dispose();
            hv_HomMat2DRotate.Dispose();
            hv_RowTrans2.Dispose();
            hv_ColTrans2.Dispose();
            hv_RowTrans3.Dispose();
            hv_ColTrans3.Dispose();
            hv_MetrologyHandle.Dispose();
            hv_Index.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_RowBegin.Dispose();
            hv_ColBegin.Dispose();
            hv_RowEnd.Dispose();
            hv_ColEnd.Dispose();
            hv_Nr.Dispose();
            hv_Nc.Dispose();
            hv_Dist.Dispose();
            hv_RowTrans4.Dispose();
            hv_ColTrans4.Dispose();
            hv_RowTrans5.Dispose();
            hv_ColTrans5.Dispose();
            hv_MetrologyHandle1.Dispose();
            hv_Row3.Dispose();
            hv_Column3.Dispose();
            hv_RowBegin1.Dispose();
            hv_ColBegin1.Dispose();
            hv_RowEnd1.Dispose();
            hv_ColEnd1.Dispose();
            hv_Nr1.Dispose();
            hv_Nc1.Dispose();
            hv_Dist1.Dispose();
            hv_CenterRow.Dispose();
            hv_CenterColumn.Dispose();
            hv_IsOverlapping.Dispose();
            hv_CenterPhi.Dispose();
            hv_RowProj.Dispose();
            hv_ColProj.Dispose();
            hv_RowProj1.Dispose();
            hv_ColProj1.Dispose();
            hv_Distance.Dispose();
            hv_Distance1.Dispose();

            return;
        }
        catch (HalconException HDevExpDefaultException)
        {
            IsErrHappen = 1;
            errStr = "请输入正确的图片";
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Cross.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_Cross1.Dispose();
            ho_ImageReduced.Dispose();
            ho_Edges.Dispose();
            ho_ContoursSplit.Dispose();
            ho_SelectedXLD.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Contour1.Dispose();
            ho_ContCircle.Dispose();
            ho_Cross3.Dispose();
            ho_Contours.Dispose();
            ho_Cross4.Dispose();
            ho_Contour.Dispose();
            ho_Contours1.Dispose();
            ho_Contour2.Dispose();
            ho_Contour3.Dispose();
            ho_Cross2.Dispose();
            ho_Arrow.Dispose();
            ho_Arrow1.Dispose();

            hv_k.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Radius.Dispose();
            hv_Row1.Dispose();
            hv_Column1.Dispose();
            hv_Radius1.Dispose();
            hv_Phi.Dispose();
            hv_Exception.Dispose();
            hv_errstr.Dispose();
            hv_Number.Dispose();
            hv_CircleRow.Dispose();
            hv_CircleCol.Dispose();
            hv_Index1.Dispose();
            hv_Row10.Dispose();
            hv_Col10.Dispose();
            hv_CircleX.Dispose();
            hv_CircleY.Dispose();
            hv_Radius2.Dispose();
            hv_StartPhi.Dispose();
            hv_EndPhi.Dispose();
            hv_PointOrder.Dispose();
            hv_HomMat2DIdentity.Dispose();
            hv_HomMat2DRotate.Dispose();
            hv_RowTrans2.Dispose();
            hv_ColTrans2.Dispose();
            hv_RowTrans3.Dispose();
            hv_ColTrans3.Dispose();
            hv_MetrologyHandle.Dispose();
            hv_Index.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_RowBegin.Dispose();
            hv_ColBegin.Dispose();
            hv_RowEnd.Dispose();
            hv_ColEnd.Dispose();
            hv_Nr.Dispose();
            hv_Nc.Dispose();
            hv_Dist.Dispose();
            hv_RowTrans4.Dispose();
            hv_ColTrans4.Dispose();
            hv_RowTrans5.Dispose();
            hv_ColTrans5.Dispose();
            hv_MetrologyHandle1.Dispose();
            hv_Row3.Dispose();
            hv_Column3.Dispose();
            hv_RowBegin1.Dispose();
            hv_ColBegin1.Dispose();
            hv_RowEnd1.Dispose();
            hv_ColEnd1.Dispose();
            hv_Nr1.Dispose();
            hv_Nc1.Dispose();
            hv_Dist1.Dispose();
            hv_CenterRow.Dispose();
            hv_CenterColumn.Dispose();
            hv_IsOverlapping.Dispose();
            hv_CenterPhi.Dispose();
            hv_RowProj.Dispose();
            hv_ColProj.Dispose();
            hv_RowProj1.Dispose();
            hv_ColProj1.Dispose();
            hv_Distance.Dispose();
            hv_Distance1.Dispose();

            //throw HDevExpDefaultException;
        }
    }
    public void action()
    {
        HTuple hv_X1, hv_Y1, hv_Pdegree, hv_CirLen;
        IsErrHappen = 0;
        hv_X1 = new HTuple();
        hv_Y1 = new HTuple();
        hv_Pdegree = new HTuple();
        hv_CirLen = new HTuple();
        HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
        HTuple hv_WindowID = new HTuple();
        try
        {
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_WindowID.Dispose();
                dev_open_window_fit_image(ho_Image, 0, 0, hv_Width / 10, hv_Height / 10, out hv_WindowID);
            }
        }
        catch (HalconException HDevExpDefaultException1)
        {
            IsErrHappen = 1;
            errStr = "无输入图片";
            return;
        }






        // Local iconic variables 

        HObject ho_Regions = null, ho_ConnectedRegions = null;
        HObject ho_SelectedRegions = null, ho_SelectedRegions1 = null;
        HObject ho_Cross, ho_SelectedRegions2 = null, ho_Cross1 = null;
        HObject ho_ImageReduced, ho_Edges, ho_ContoursSplit, ho_SelectedXLD;
        HObject ho_ObjectSelected = null, ho_Contour1, ho_ContCircle;
        HObject ho_Cross3, ho_Contours = null, ho_Cross4 = null, ho_Contour = null;
        HObject ho_Contours1 = null, ho_Contour2 = null, ho_Contour3 = null;
        HObject ho_Cross2 = null, ho_Arrow, ho_Arrow1;

        // Local control variables 

        HTuple hv_k = new HTuple(), hv_Row = new HTuple();
        HTuple hv_Column = new HTuple(), hv_Radius = new HTuple();
        HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
        HTuple hv_Radius1 = new HTuple(), hv_Phi = new HTuple();
        HTuple hv_Exception = new HTuple(), hv_errstr = new HTuple();
        HTuple hv_Number = new HTuple(), hv_CircleRow = new HTuple();
        HTuple hv_CircleCol = new HTuple(), hv_Index1 = new HTuple();
        HTuple hv_Row10 = new HTuple(), hv_Col10 = new HTuple();
        HTuple hv_CircleX = new HTuple(), hv_CircleY = new HTuple();
        HTuple hv_Radius2 = new HTuple(), hv_StartPhi = new HTuple();
        HTuple hv_EndPhi = new HTuple(), hv_PointOrder = new HTuple();
        HTuple hv_HomMat2DIdentity = new HTuple(), hv_HomMat2DRotate = new HTuple();
        HTuple hv_RowTrans2 = new HTuple(), hv_ColTrans2 = new HTuple();
        HTuple hv_RowTrans3 = new HTuple(), hv_ColTrans3 = new HTuple();
        HTuple hv_MetrologyHandle = new HTuple(), hv_Index = new HTuple();
        HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
        HTuple hv_RowBegin = new HTuple(), hv_ColBegin = new HTuple();
        HTuple hv_RowEnd = new HTuple(), hv_ColEnd = new HTuple();
        HTuple hv_Nr = new HTuple(), hv_Nc = new HTuple(), hv_Dist = new HTuple();
        HTuple hv_RowTrans4 = new HTuple(), hv_ColTrans4 = new HTuple();
        HTuple hv_RowTrans5 = new HTuple(), hv_ColTrans5 = new HTuple();
        HTuple hv_MetrologyHandle1 = new HTuple(), hv_Row3 = new HTuple();
        HTuple hv_Column3 = new HTuple(), hv_RowBegin1 = new HTuple();
        HTuple hv_ColBegin1 = new HTuple(), hv_RowEnd1 = new HTuple();
        HTuple hv_ColEnd1 = new HTuple(), hv_Nr1 = new HTuple();
        HTuple hv_Nc1 = new HTuple(), hv_Dist1 = new HTuple();
        HTuple hv_CenterRow = new HTuple(), hv_CenterColumn = new HTuple();
        HTuple hv_IsOverlapping = new HTuple(), hv_CenterPhi = new HTuple();
        HTuple hv_RowProj = new HTuple(), hv_ColProj = new HTuple();
        HTuple hv_RowProj1 = new HTuple(), hv_ColProj1 = new HTuple();
        HTuple hv_Distance = new HTuple(), hv_Distance1 = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_Cross);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_Cross1);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Edges);
        HOperatorSet.GenEmptyObj(out ho_ContoursSplit);
        HOperatorSet.GenEmptyObj(out ho_SelectedXLD);
        HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
        HOperatorSet.GenEmptyObj(out ho_Contour1);
        HOperatorSet.GenEmptyObj(out ho_ContCircle);
        HOperatorSet.GenEmptyObj(out ho_Cross3);
        HOperatorSet.GenEmptyObj(out ho_Contours);
        HOperatorSet.GenEmptyObj(out ho_Cross4);
        HOperatorSet.GenEmptyObj(out ho_Contour);
        HOperatorSet.GenEmptyObj(out ho_Contours1);
        HOperatorSet.GenEmptyObj(out ho_Contour2);
        HOperatorSet.GenEmptyObj(out ho_Contour3);
        HOperatorSet.GenEmptyObj(out ho_Cross2);
        HOperatorSet.GenEmptyObj(out ho_Arrow);
        HOperatorSet.GenEmptyObj(out ho_Arrow1);

        try
        {
            try
            {
                hv_k.Dispose();
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_k = 6576 / 62.1;
                }
                ho_Regions.Dispose();
                HOperatorSet.Threshold(ho_Image, out ho_Regions, 81, 255);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
                    "and", 321101, 1.42202e+006);

                //取两圆心之间的角度
                ho_SelectedRegions1.Dispose();
                HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, "area",
                    "and", 832110, 906789);
                hv_Row.Dispose(); hv_Column.Dispose(); hv_Radius.Dispose();
                HOperatorSet.SmallestCircle(ho_SelectedRegions1, out hv_Row, out hv_Column,
                    out hv_Radius);
                //gen_cross_contour_xld (Cross, Row, Column, 106, 0.785398)

                ho_SelectedRegions2.Dispose();
                HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area",
                    "and", 600917, 637615);
                hv_Row1.Dispose(); hv_Column1.Dispose(); hv_Radius1.Dispose();
                HOperatorSet.SmallestCircle(ho_SelectedRegions2, out hv_Row1, out hv_Column1,
                    out hv_Radius1);
                //gen_cross_contour_xld (Cross1, Row1, Column1, 106, 0.785398)
                hv_Phi.Dispose();
                HOperatorSet.LineOrientation(hv_Row, hv_Column, hv_Row1, hv_Column1, out hv_Phi);
                if ((int)(new HTuple(hv_Column.TupleGreater(hv_Column1))) != 0)
                {
                    using (HDevDisposeHelper dh = new HDevDisposeHelper())
                    {
                        {
                            HTuple
                              ExpTmpLocalVar_Phi = hv_Phi + ((new HTuple(180)).TupleRad()
                                );
                            hv_Phi.Dispose();
                            hv_Phi = ExpTmpLocalVar_Phi;
                        }
                    }
                }
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                IsErrHappen = 1;
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                errStr = "blog找圆异常！";
                return;
            }

            //圆
            ho_SelectedRegions2.Dispose();
            HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions2, "area",
                "and", 600917, 637615);
            ho_ImageReduced.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_SelectedRegions2, out ho_ImageReduced
                );

            ho_Edges.Dispose();
            HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 50);
            ho_ContoursSplit.Dispose();
            HOperatorSet.SegmentContoursXld(ho_Edges, out ho_ContoursSplit, "lines_circles",
                5, 4, 2);

            ho_SelectedXLD.Dispose();
            HOperatorSet.SelectShapeXld(ho_ContoursSplit, out ho_SelectedXLD, (new HTuple("contlength")).TupleConcat(
                "circularity"), "and", (new HTuple(205.05)).TupleConcat(0.03798), (new HTuple(500)).TupleConcat(
                0.2));
            hv_Number.Dispose();
            HOperatorSet.CountObj(ho_SelectedXLD, out hv_Number);
            hv_CircleRow.Dispose();
            hv_CircleRow = new HTuple();
            hv_CircleCol.Dispose();
            hv_CircleCol = new HTuple();
            HTuple end_val33 = hv_Number;
            HTuple step_val33 = 1;
            for (hv_Index1 = 1; hv_Index1.Continue(end_val33, step_val33); hv_Index1 = hv_Index1.TupleAdd(step_val33))
            {
                ho_ObjectSelected.Dispose();
                HOperatorSet.SelectObj(ho_SelectedXLD, out ho_ObjectSelected, hv_Index1);
                hv_Row10.Dispose(); hv_Col10.Dispose();
                HOperatorSet.GetContourXld(ho_ObjectSelected, out hv_Row10, out hv_Col10);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_CircleRow = hv_CircleRow.TupleConcat(
                            hv_Row10);
                        hv_CircleRow.Dispose();
                        hv_CircleRow = ExpTmpLocalVar_CircleRow;
                    }
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    {
                        HTuple
                          ExpTmpLocalVar_CircleCol = hv_CircleCol.TupleConcat(
                            hv_Col10);
                        hv_CircleCol.Dispose();
                        hv_CircleCol = ExpTmpLocalVar_CircleCol;
                    }
                }
            }
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                ho_Cross.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row10, hv_Col10, 6, (new HTuple(45)).TupleRad()
                    );
            }
            ho_Contour1.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_CircleRow, hv_CircleCol);
            hv_CircleX.Dispose(); hv_CircleY.Dispose(); hv_Radius2.Dispose(); hv_StartPhi.Dispose(); hv_EndPhi.Dispose(); hv_PointOrder.Dispose();
            HOperatorSet.FitCircleContourXld(ho_Contour1, "algebraic", -1, 0, 0, 3, 2,
                out hv_CircleX, out hv_CircleY, out hv_Radius2, out hv_StartPhi, out hv_EndPhi,
                out hv_PointOrder);
            ho_ContCircle.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircle, hv_CircleX, hv_CircleY,
                hv_Radius2, 0, 6.28, "positive", 1);
            ho_Cross3.Dispose();
            HOperatorSet.GenCrossContourXld(out ho_Cross3, hv_CircleX, hv_CircleY, 106,
                hv_StartPhi);
            hv_CirLen.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_CirLen = (hv_Radius2 / hv_k) * 2;
            }

            try
            {
                hv_HomMat2DIdentity.Dispose();
                HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_HomMat2DRotate.Dispose();
                    HOperatorSet.HomMat2dRotate(hv_HomMat2DIdentity, -hv_Phi, hv_Column1, hv_Row1,
                        out hv_HomMat2DRotate);
                }


                //x轴
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans2.Dispose(); hv_ColTrans2.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1 - 1500.22) + 640,
                        hv_Row1 + 722, out hv_RowTrans2, out hv_ColTrans2);
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans3.Dispose(); hv_ColTrans3.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, (hv_Column1 - 1500.22) - 640,
                        hv_Row1 + 722, out hv_RowTrans3, out hv_ColTrans3);
                }
                hv_MetrologyHandle.Dispose();
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                hv_Index.Dispose();
                HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_ColTrans3,
                    hv_RowTrans3, hv_ColTrans2, hv_RowTrans2, 15, 10, 1, 20, new HTuple(),
                    new HTuple(), out hv_Index);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
                ho_Contours.Dispose(); hv_Row2.Dispose(); hv_Column2.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyHandle,
                    "all", "all", out hv_Row2, out hv_Column2);
                ho_Cross4.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross4, hv_Row2, hv_Column2, 16, hv_Phi);
                ho_Contour.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_Row2, hv_Column2);
                hv_RowBegin.Dispose(); hv_ColBegin.Dispose(); hv_RowEnd.Dispose(); hv_ColEnd.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
                HOperatorSet.FitLineContourXld(ho_Contour, "tukey", -1, 0, 5, 2, out hv_RowBegin,
                    out hv_ColBegin, out hv_RowEnd, out hv_ColEnd, out hv_Nr, out hv_Nc,
                    out hv_Dist);
                //y轴
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans4.Dispose(); hv_ColTrans4.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1 + 562.397, hv_Row1 + 450,
                        out hv_RowTrans4, out hv_ColTrans4);
                }
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    hv_RowTrans5.Dispose(); hv_ColTrans5.Dispose();
                    HOperatorSet.AffineTransPixel(hv_HomMat2DRotate, hv_Column1 + 562.397, hv_Row1 - 450,
                        out hv_RowTrans5, out hv_ColTrans5);
                }
                hv_MetrologyHandle1.Dispose();
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
                hv_Index1.Dispose();
                HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle1, hv_ColTrans5,
                    hv_RowTrans5, hv_ColTrans4, hv_RowTrans4, 15, 10, 1, 30, new HTuple(),
                    new HTuple(), out hv_Index1);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
                ho_Contours1.Dispose(); hv_Row3.Dispose(); hv_Column3.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours1, hv_MetrologyHandle1,
                    "all", "all", out hv_Row3, out hv_Column3);
                ho_Cross1.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_Row3, hv_Column3, 16, hv_Phi);
                ho_Contour2.Dispose();
                HOperatorSet.GenContourPolygonXld(out ho_Contour2, hv_Row3, hv_Column3);
                hv_RowBegin1.Dispose(); hv_ColBegin1.Dispose(); hv_RowEnd1.Dispose(); hv_ColEnd1.Dispose(); hv_Nr1.Dispose(); hv_Nc1.Dispose(); hv_Dist1.Dispose();
                HOperatorSet.FitLineContourXld(ho_Contour2, "tukey", -1, 0, 5, 2, out hv_RowBegin1,
                    out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1,
                    out hv_Dist1);

                //gen_region_line (RegionLines, RowBegin1, ColBegin1, RowEnd1, ColEnd1)
                using (HDevDisposeHelper dh = new HDevDisposeHelper())
                {
                    ho_Contour3.Dispose();
                    HOperatorSet.GenContourPolygonXld(out ho_Contour3, hv_RowBegin1.TupleConcat(
                        hv_RowEnd1), hv_ColBegin1.TupleConcat(hv_ColEnd1));
                }

                //坐标轴中心点
                hv_CenterRow.Dispose(); hv_CenterColumn.Dispose(); hv_IsOverlapping.Dispose();
                HOperatorSet.IntersectionLines(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd,
                    hv_RowBegin1, hv_ColBegin1, hv_RowEnd1, hv_ColEnd1, out hv_CenterRow,
                    out hv_CenterColumn, out hv_IsOverlapping);
                ho_Cross2.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross2, hv_CenterRow, hv_CenterColumn,
                    106, hv_Phi);
                hv_CenterPhi.Dispose();
                HOperatorSet.LineOrientation(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd,
                    out hv_CenterPhi);
            }
            // catch (Exception) 
            catch (HalconException HDevExpDefaultException1)
            {
                IsErrHappen = 1;
                HDevExpDefaultException1.ToHTuple(out hv_Exception);
                errStr = "坐标系建立异常！";
                return;
            }



            hv_RowProj.Dispose(); hv_ColProj.Dispose();
            HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin,
                hv_RowEnd, hv_ColEnd, out hv_RowProj, out hv_ColProj);
            //gen_cross_contour_xld (Cross1, RowProj, ColProj, 106, CenterPhi)
            hv_RowProj1.Dispose(); hv_ColProj1.Dispose();
            HOperatorSet.ProjectionPl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1,
                hv_RowEnd1, hv_ColEnd1, out hv_RowProj1, out hv_ColProj1);
            //gen_cross_contour_xld (Cross4, RowProj1, ColProj1, 106, CenterPhi)

            ho_Arrow.Dispose();
            gen_arrow_contour_xld(out ho_Arrow, hv_CircleX, hv_CircleY, hv_RowProj, hv_ColProj,
                15, 15);
            ho_Arrow1.Dispose();
            gen_arrow_contour_xld(out ho_Arrow1, hv_CircleX, hv_CircleY, hv_RowProj1, hv_ColProj1,
                15, 15);
            //距离
            hv_Distance.Dispose();
            HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin, hv_ColBegin, hv_RowEnd,
                hv_ColEnd, out hv_Distance);
            hv_Distance1.Dispose();
            HOperatorSet.DistancePl(hv_CircleX, hv_CircleY, hv_RowBegin1, hv_ColBegin1,
                hv_RowEnd1, hv_ColEnd1, out hv_Distance1);

            hv_X1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_X1 = hv_Distance1 / hv_k;
            }
            hv_Y1.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Y1 = hv_Distance / hv_k;
            }
            hv_Pdegree.Dispose();
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_Pdegree = 2 * ((((((hv_X1 - 5.325)).TuplePow(
                    2)) + (((hv_Y1 - 6.788)).TuplePow(2)))).TupleSqrt());
            }
            //圆上4点
            //LenY1 := 8.331
            //LenY2 := 2.319
            //LenX1 := 3.782
            //LenX2 := 9.794
            //* PY1 :=  CenterColumn - LenY2*k
            //* PY2 := CenterColumn- LenY1*k
            //* PX1 := CenterRow - LenX1*k
            //* PX2 := CenterRow - LenX2*k
            //hom_mat2d_identity (HomMat2DIdentity1)
            //* hom_mat2d_rotate (HomMat2DIdentity1, -CenterPhi, CenterColumn, CenterRow, HomMat2DRotate1)
            //* affine_trans_pixel (HomMat2DRotate1, PY1, PX1, RowTrans, ColTrans)
            //* gen_cross_contour_xld (Cross11, ColTrans, RowTrans, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1, PY1, PX2, RowTrans1, ColTrans1)
            //* gen_cross_contour_xld (Cross12, ColTrans1, RowTrans1, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1, PY2, PX1, RowTrans6, ColTrans6)
            //* gen_cross_contour_xld (Cross13, ColTrans6, RowTrans6, 106, CenterPhi)
            //* affine_trans_pixel (HomMat2DRotate1,  PY2, PX2, RowTrans7, ColTrans7)
            //* gen_cross_contour_xld (Cross14, ColTrans7, RowTrans7, 106, CenterPhi)

            HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
            HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 2);

            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Contour, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Contour3, hv_ExpDefaultWinHandle);

            HOperatorSet.DispObj(ho_Cross2, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_ContCircle, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Cross3, hv_ExpDefaultWinHandle);

            HOperatorSet.DispObj(ho_Arrow, hv_ExpDefaultWinHandle);
            HOperatorSet.DispObj(ho_Arrow1, hv_ExpDefaultWinHandle);

            HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, 100, 100);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                HOperatorSet.WriteString(hv_ExpDefaultWinHandle, (((((("X1 = " + hv_X1) + "\tY1 = ") + hv_Y1) + "\tDg = ") + hv_Pdegree) + "\tconLen = ") + hv_CirLen);
            }
            X2 = hv_X1; Y2 = hv_Y1; DG = hv_Pdegree; CircleRadius = hv_CirLen;
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Cross.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_Cross1.Dispose();
            ho_ImageReduced.Dispose();
            ho_Edges.Dispose();
            ho_ContoursSplit.Dispose();
            ho_SelectedXLD.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Contour1.Dispose();
            ho_ContCircle.Dispose();
            ho_Cross3.Dispose();
            ho_Contours.Dispose();
            ho_Cross4.Dispose();
            ho_Contour.Dispose();
            ho_Contours1.Dispose();
            ho_Contour2.Dispose();
            ho_Contour3.Dispose();
            ho_Cross2.Dispose();
            ho_Arrow.Dispose();
            ho_Arrow1.Dispose();

            hv_k.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Radius.Dispose();
            hv_Row1.Dispose();
            hv_Column1.Dispose();
            hv_Radius1.Dispose();
            hv_Phi.Dispose();
            hv_Exception.Dispose();
            hv_errstr.Dispose();
            hv_Number.Dispose();
            hv_CircleRow.Dispose();
            hv_CircleCol.Dispose();
            hv_Index1.Dispose();
            hv_Row10.Dispose();
            hv_Col10.Dispose();
            hv_CircleX.Dispose();
            hv_CircleY.Dispose();
            hv_Radius2.Dispose();
            hv_StartPhi.Dispose();
            hv_EndPhi.Dispose();
            hv_PointOrder.Dispose();
            hv_HomMat2DIdentity.Dispose();
            hv_HomMat2DRotate.Dispose();
            hv_RowTrans2.Dispose();
            hv_ColTrans2.Dispose();
            hv_RowTrans3.Dispose();
            hv_ColTrans3.Dispose();
            hv_MetrologyHandle.Dispose();
            hv_Index.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_RowBegin.Dispose();
            hv_ColBegin.Dispose();
            hv_RowEnd.Dispose();
            hv_ColEnd.Dispose();
            hv_Nr.Dispose();
            hv_Nc.Dispose();
            hv_Dist.Dispose();
            hv_RowTrans4.Dispose();
            hv_ColTrans4.Dispose();
            hv_RowTrans5.Dispose();
            hv_ColTrans5.Dispose();
            hv_MetrologyHandle1.Dispose();
            hv_Row3.Dispose();
            hv_Column3.Dispose();
            hv_RowBegin1.Dispose();
            hv_ColBegin1.Dispose();
            hv_RowEnd1.Dispose();
            hv_ColEnd1.Dispose();
            hv_Nr1.Dispose();
            hv_Nc1.Dispose();
            hv_Dist1.Dispose();
            hv_CenterRow.Dispose();
            hv_CenterColumn.Dispose();
            hv_IsOverlapping.Dispose();
            hv_CenterPhi.Dispose();
            hv_RowProj.Dispose();
            hv_ColProj.Dispose();
            hv_RowProj1.Dispose();
            hv_ColProj1.Dispose();
            hv_Distance.Dispose();
            hv_Distance1.Dispose();

            return;
        }
        catch (HalconException HDevExpDefaultException)
        {
            IsErrHappen = 1;
            errStr = "请输入正确的图片";
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();
            ho_Cross.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_Cross1.Dispose();
            ho_ImageReduced.Dispose();
            ho_Edges.Dispose();
            ho_ContoursSplit.Dispose();
            ho_SelectedXLD.Dispose();
            ho_ObjectSelected.Dispose();
            ho_Contour1.Dispose();
            ho_ContCircle.Dispose();
            ho_Cross3.Dispose();
            ho_Contours.Dispose();
            ho_Cross4.Dispose();
            ho_Contour.Dispose();
            ho_Contours1.Dispose();
            ho_Contour2.Dispose();
            ho_Contour3.Dispose();
            ho_Cross2.Dispose();
            ho_Arrow.Dispose();
            ho_Arrow1.Dispose();

            hv_k.Dispose();
            hv_Row.Dispose();
            hv_Column.Dispose();
            hv_Radius.Dispose();
            hv_Row1.Dispose();
            hv_Column1.Dispose();
            hv_Radius1.Dispose();
            hv_Phi.Dispose();
            hv_Exception.Dispose();
            hv_errstr.Dispose();
            hv_Number.Dispose();
            hv_CircleRow.Dispose();
            hv_CircleCol.Dispose();
            hv_Index1.Dispose();
            hv_Row10.Dispose();
            hv_Col10.Dispose();
            hv_CircleX.Dispose();
            hv_CircleY.Dispose();
            hv_Radius2.Dispose();
            hv_StartPhi.Dispose();
            hv_EndPhi.Dispose();
            hv_PointOrder.Dispose();
            hv_HomMat2DIdentity.Dispose();
            hv_HomMat2DRotate.Dispose();
            hv_RowTrans2.Dispose();
            hv_ColTrans2.Dispose();
            hv_RowTrans3.Dispose();
            hv_ColTrans3.Dispose();
            hv_MetrologyHandle.Dispose();
            hv_Index.Dispose();
            hv_Row2.Dispose();
            hv_Column2.Dispose();
            hv_RowBegin.Dispose();
            hv_ColBegin.Dispose();
            hv_RowEnd.Dispose();
            hv_ColEnd.Dispose();
            hv_Nr.Dispose();
            hv_Nc.Dispose();
            hv_Dist.Dispose();
            hv_RowTrans4.Dispose();
            hv_ColTrans4.Dispose();
            hv_RowTrans5.Dispose();
            hv_ColTrans5.Dispose();
            hv_MetrologyHandle1.Dispose();
            hv_Row3.Dispose();
            hv_Column3.Dispose();
            hv_RowBegin1.Dispose();
            hv_ColBegin1.Dispose();
            hv_RowEnd1.Dispose();
            hv_ColEnd1.Dispose();
            hv_Nr1.Dispose();
            hv_Nc1.Dispose();
            hv_Dist1.Dispose();
            hv_CenterRow.Dispose();
            hv_CenterColumn.Dispose();
            hv_IsOverlapping.Dispose();
            hv_CenterPhi.Dispose();
            hv_RowProj.Dispose();
            hv_ColProj.Dispose();
            hv_RowProj1.Dispose();
            hv_ColProj1.Dispose();
            hv_Distance.Dispose();
            hv_Distance1.Dispose();

            //throw HDevExpDefaultException;
        }
    }
    public void readImage(out HObject ho_Image, HTuple hv_fileName)
    {



        // Local control variables 
        HTuple hv_WindowID ;
        HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        hv_WindowID = new HTuple();
        try
        {
            //dev_close_window(...);

            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, hv_fileName);
            hv_Width.Dispose(); hv_Height.Dispose();
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_WindowID.Dispose();
                dev_open_window_fit_image(ho_Image, 0, 0, hv_Width / 10, hv_Height / 10, out hv_WindowID);
            }

            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_WindowID.Dispose();
            return;
        }
        catch (HalconException HDevExpDefaultException)
        {

            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_WindowID.Dispose();
            throw HDevExpDefaultException;
        }
    }

    public void readImage(string fileName)
    {


        HTuple hv_fileName = fileName;
        // Local control variables 
        HTuple hv_WindowID;
        HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_Image);
        hv_WindowID = new HTuple();
        try
        {
            //dev_close_window(...);

            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, hv_fileName);
            hv_Width.Dispose(); hv_Height.Dispose();
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            using (HDevDisposeHelper dh = new HDevDisposeHelper())
            {
                hv_WindowID.Dispose();
                dev_open_window_fit_image(ho_Image, 0, 0, hv_Width / 10, hv_Height / 10, out hv_WindowID);
            }

            HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_WindowID.Dispose();
            return;
        }
        catch (HalconException HDevExpDefaultException)
        {

            hv_Width.Dispose();
            hv_Height.Dispose();
            hv_WindowID.Dispose();
            throw HDevExpDefaultException;
        }
    }
    public void readImage (out HObject ho_Image, HTuple hv_fileName, out HTuple hv_WindowID)
  {



    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    hv_WindowID = new HTuple();
    try
    {
      //dev_close_window(...);

      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, hv_fileName);
      hv_Width.Dispose();hv_Height.Dispose();
      HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      hv_WindowID.Dispose();
      dev_open_window_fit_image(ho_Image, 0, 0, hv_Width/10, hv_Height/10, out hv_WindowID);
      }

      HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);

      hv_Width.Dispose();
      hv_Height.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {

      hv_Width.Dispose();
      hv_Height.Dispose();

      throw HDevExpDefaultException;
    }
  }



  public void InitHalcon()
  {
        // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }
    public void InitHalcon(HTuple Window)
    {
        hv_ExpDefaultWinHandle = Window;
        // Default settings used in HDevelop
        HOperatorSet.SetSystem("width", 512);
        HOperatorSet.SetSystem("height", 512);
    }

    public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

